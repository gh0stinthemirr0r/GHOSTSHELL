{
  "version": 3,
  "sources": ["../../@xterm/addon-webgl/lib/webpack:/WebglAddon/webpack/universalModuleDefinition", "../../@xterm/addon-webgl/lib/webpack:/WebglAddon/src/GlyphRenderer.ts", "../../@xterm/addon-webgl/lib/webpack:/WebglAddon/src/RectangleRenderer.ts", "../../@xterm/addon-webgl/lib/webpack:/WebglAddon/src/RenderModel.ts", "../../@xterm/addon-webgl/lib/webpack:/WebglAddon/src/WebglRenderer.ts", "../../@xterm/addon-webgl/lib/webpack:/WebglAddon/src/WebglUtils.ts", "../../@xterm/addon-webgl/lib/webpack:/WebglAddon/src/renderLayer/BaseRenderLayer.ts", "../../@xterm/addon-webgl/lib/webpack:/WebglAddon/src/renderLayer/LinkRenderLayer.ts", "../../@xterm/addon-webgl/lib/src/browser/Lifecycle.ts", "../../@xterm/addon-webgl/lib/src/browser/renderer/shared/CellColorResolver.ts", "../../@xterm/addon-webgl/lib/src/browser/renderer/shared/CharAtlasCache.ts", "../../@xterm/addon-webgl/lib/src/browser/renderer/shared/CharAtlasUtils.ts", "../../@xterm/addon-webgl/lib/src/browser/renderer/shared/Constants.ts", "../../@xterm/addon-webgl/lib/src/browser/renderer/shared/CursorBlinkStateManager.ts", "../../@xterm/addon-webgl/lib/src/browser/renderer/shared/CustomGlyphs.ts", "../../@xterm/addon-webgl/lib/src/browser/renderer/shared/DevicePixelObserver.ts", "../../@xterm/addon-webgl/lib/src/browser/renderer/shared/RendererUtils.ts", "../../@xterm/addon-webgl/lib/src/browser/renderer/shared/SelectionRenderModel.ts", "../../@xterm/addon-webgl/lib/src/browser/renderer/shared/TextureAtlas.ts", "../../@xterm/addon-webgl/lib/src/common/Color.ts", "../../@xterm/addon-webgl/lib/src/common/EventEmitter.ts", "../../@xterm/addon-webgl/lib/src/common/Lifecycle.ts", "../../@xterm/addon-webgl/lib/src/common/MultiKeyMap.ts", "../../@xterm/addon-webgl/lib/src/common/Platform.ts", "../../@xterm/addon-webgl/lib/src/common/TaskQueue.ts", "../../@xterm/addon-webgl/lib/src/common/buffer/AttributeData.ts", "../../@xterm/addon-webgl/lib/src/common/buffer/CellData.ts", "../../@xterm/addon-webgl/lib/src/common/buffer/Constants.ts", "../../@xterm/addon-webgl/lib/src/common/input/TextDecoder.ts", "../../@xterm/addon-webgl/lib/src/common/services/LogService.ts", "../../@xterm/addon-webgl/lib/src/common/services/ServiceRegistry.ts", "../../@xterm/addon-webgl/lib/src/common/services/Services.ts", "../../@xterm/addon-webgl/lib/webpack:/WebglAddon/webpack/bootstrap", "../../@xterm/addon-webgl/lib/webpack:/WebglAddon/src/WebglAddon.ts"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebglAddon\"] = factory();\n\telse\n\t\troot[\"WebglAddon\"] = factory();\n})(self, () => {\nreturn ", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { allowRescaling, throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { TextureAtlas } from 'browser/renderer/shared/TextureAtlas';\nimport { IRasterizedGlyph, IRenderDimensions, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { Terminal } from '@xterm/xterm';\nimport { IRenderModel, IWebGL2RenderingContext, IWebGLVertexArrayObject } from './Types';\nimport { createProgram, GLTexture, PROJECTION_MATRIX } from './WebglUtils';\nimport type { IOptionsService } from 'common/services/Services';\n\ninterface IVertices {\n  attributes: Float32Array;\n  /**\n   * These buffers are the ones used to bind to WebGL, the reason there are\n   * multiple is to allow double buffering to work as you cannot modify the\n   * buffer while it's being used by the GPU. Having multiple lets us start\n   * working on the next frame.\n   */\n  attributesBuffers: Float32Array[];\n  count: number;\n}\n\nconst enum VertexAttribLocations {\n  UNIT_QUAD = 0,\n  CELL_POSITION = 1,\n  OFFSET = 2,\n  SIZE = 3,\n  TEXPAGE = 4,\n  TEXCOORD = 5,\n  TEXSIZE = 6\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\nlayout (location = ${VertexAttribLocations.CELL_POSITION}) in vec2 a_cellpos;\nlayout (location = ${VertexAttribLocations.OFFSET}) in vec2 a_offset;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.TEXPAGE}) in float a_texpage;\nlayout (location = ${VertexAttribLocations.TEXCOORD}) in vec2 a_texcoord;\nlayout (location = ${VertexAttribLocations.TEXSIZE}) in vec2 a_texsize;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\nflat out int v_texpage;\n\nvoid main() {\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_texpage = int(a_texpage);\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\n}`;\n\nfunction createFragmentShaderSource(maxFragmentShaderTextureUnits: number): string {\n  let textureConditionals = '';\n  for (let i = 1; i < maxFragmentShaderTextureUnits; i++) {\n    textureConditionals += ` else if (v_texpage == ${i}) { outColor = texture(u_texture[${i}], v_texcoord); }`;\n  }\n  return (`#version 300 es\nprecision lowp float;\n\nin vec2 v_texcoord;\nflat in int v_texpage;\n\nuniform sampler2D u_texture[${maxFragmentShaderTextureUnits}];\n\nout vec4 outColor;\n\nvoid main() {\n  if (v_texpage == 0) {\n    outColor = texture(u_texture[0], v_texcoord);\n  } ${textureConditionals}\n}`);\n}\n\nconst INDICES_PER_CELL = 11;\nconst BYTES_PER_CELL = INDICES_PER_CELL * Float32Array.BYTES_PER_ELEMENT;\nconst CELL_POSITION_INDICES = 2;\n\n// Work variables to avoid garbage collection\nlet $i = 0;\nlet $glyph: IRasterizedGlyph | undefined = undefined;\nlet $leftCellPadding = 0;\nlet $clippedPixels = 0;\n\nexport class GlyphRenderer extends Disposable {\n  private readonly _program: WebGLProgram;\n  private readonly _vertexArrayObject: IWebGLVertexArrayObject;\n  private readonly _projectionLocation: WebGLUniformLocation;\n  private readonly _resolutionLocation: WebGLUniformLocation;\n  private readonly _textureLocation: WebGLUniformLocation;\n  private readonly _atlasTextures: GLTexture[];\n  private readonly _attributesBuffer: WebGLBuffer;\n\n  private _atlas: ITextureAtlas | undefined;\n  private _activeBuffer: number = 0;\n  private readonly _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(0),\n    attributesBuffers: [\n      new Float32Array(0),\n      new Float32Array(0)\n    ]\n  };\n\n  constructor(\n    private readonly _terminal: Terminal,\n    private readonly _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions,\n    private readonly _optionsService: IOptionsService\n  ) {\n    super();\n\n    const gl = this._gl;\n\n    if (TextureAtlas.maxAtlasPages === undefined) {\n      // Typically 8 or 16\n      TextureAtlas.maxAtlasPages = Math.min(32, throwIfFalsy(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS) as number | null));\n      // Almost all clients will support >= 4096\n      TextureAtlas.maxTextureSize = throwIfFalsy(gl.getParameter(gl.MAX_TEXTURE_SIZE) as number | null);\n    }\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, createFragmentShaderSource(TextureAtlas.maxAtlasPages)));\n    this.register(toDisposable(() => gl.deleteProgram(this._program)));\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._textureLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_texture'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(unitQuadVerticesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertices to allow is to draw 2 triangles from the vertices via a\n    // triangle strip\n    const unitQuadElementIndices = new Uint8Array([0, 1, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(elementIndicesBuffer)));\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    this.register(toDisposable(() => gl.deleteBuffer(this._attributesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.OFFSET);\n    gl.vertexAttribPointer(VertexAttribLocations.OFFSET, 2, gl.FLOAT, false, BYTES_PER_CELL, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.OFFSET, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXPAGE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXPAGE, 1, gl.FLOAT, false, BYTES_PER_CELL, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXPAGE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXCOORD);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXCOORD, 2, gl.FLOAT, false, BYTES_PER_CELL, 5 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXCOORD, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXSIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXSIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 7 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXSIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.CELL_POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.CELL_POSITION, 2, gl.FLOAT, false, BYTES_PER_CELL, 9 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.CELL_POSITION, 1);\n\n    // Setup static uniforms\n    gl.useProgram(this._program);\n    const textureUnits = new Int32Array(TextureAtlas.maxAtlasPages);\n    for (let i = 0; i < TextureAtlas.maxAtlasPages; i++) {\n      textureUnits[i] = i;\n    }\n    gl.uniform1iv(this._textureLocation, textureUnits);\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n\n    // Setup 1x1 red pixel textures for all potential atlas pages, if one of these invalid textures\n    // is ever drawn it will show characters as red rectangles.\n    this._atlasTextures = [];\n    for (let i = 0; i < TextureAtlas.maxAtlasPages; i++) {\n      const glTexture = new GLTexture(throwIfFalsy(gl.createTexture()));\n      this.register(toDisposable(() => gl.deleteTexture(glTexture.texture)));\n      gl.activeTexture(gl.TEXTURE0 + i);\n      gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([255, 0, 0, 255]));\n      this._atlasTextures[i] = glTexture;\n    }\n\n    // Allow drawing of transparent texture\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // Set viewport\n    this.handleResize();\n  }\n\n  public beginFrame(): boolean {\n    return this._atlas ? this._atlas.beginFrame() : true;\n  }\n\n  public updateCell(x: number, y: number, code: number, bg: number, fg: number, ext: number, chars: string, width: number, lastBg: number): void {\n    // Since this function is called for every cell (`rows*cols`), it must be very optimized. It\n    // should not instantiate any variables unless a new glyph is drawn to the cache where the\n    // slight slowdown is acceptable for the developer ergonomics provided as it's a once of for\n    // each glyph.\n    this._updateCell(this._vertices.attributes, x, y, code, bg, fg, ext, chars, width, lastBg);\n  }\n\n  private _updateCell(array: Float32Array, x: number, y: number, code: number | undefined, bg: number, fg: number, ext: number, chars: string, width: number, lastBg: number): void {\n    $i = (y * this._terminal.cols + x) * INDICES_PER_CELL;\n\n    // Exit early if this is a null character, allow space character to continue as it may have\n    // underline/strikethrough styles\n    if (code === NULL_CELL_CODE || code === undefined/* This is used for the right side of wide chars */) {\n      array.fill(0, $i, $i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    if (!this._atlas) {\n      return;\n    }\n\n    // Get the glyph\n    if (chars && chars.length > 1) {\n      $glyph = this._atlas.getRasterizedGlyphCombinedChar(chars, bg, fg, ext, false);\n    } else {\n      $glyph = this._atlas.getRasterizedGlyph(code, bg, fg, ext, false);\n    }\n\n    $leftCellPadding = Math.floor((this._dimensions.device.cell.width - this._dimensions.device.char.width) / 2);\n    if (bg !== lastBg && $glyph.offset.x > $leftCellPadding) {\n      $clippedPixels = $glyph.offset.x - $leftCellPadding;\n      // a_origin\n      array[$i    ] = -($glyph.offset.x - $clippedPixels) + this._dimensions.device.char.left;\n      array[$i + 1] = -$glyph.offset.y + this._dimensions.device.char.top;\n      // a_size\n      array[$i + 2] = ($glyph.size.x - $clippedPixels) / this._dimensions.device.canvas.width;\n      array[$i + 3] = $glyph.size.y / this._dimensions.device.canvas.height;\n      // a_texpage\n      array[$i + 4] = $glyph.texturePage;\n      // a_texcoord\n      array[$i + 5] = $glyph.texturePositionClipSpace.x + $clippedPixels / this._atlas.pages[$glyph.texturePage].canvas.width;\n      array[$i + 6] = $glyph.texturePositionClipSpace.y;\n      // a_texsize\n      array[$i + 7] = $glyph.sizeClipSpace.x - $clippedPixels / this._atlas.pages[$glyph.texturePage].canvas.width;\n      array[$i + 8] = $glyph.sizeClipSpace.y;\n    } else {\n      // a_origin\n      array[$i    ] = -$glyph.offset.x + this._dimensions.device.char.left;\n      array[$i + 1] = -$glyph.offset.y + this._dimensions.device.char.top;\n      // a_size\n      array[$i + 2] = $glyph.size.x / this._dimensions.device.canvas.width;\n      array[$i + 3] = $glyph.size.y / this._dimensions.device.canvas.height;\n      // a_texpage\n      array[$i + 4] = $glyph.texturePage;\n      // a_texcoord\n      array[$i + 5] = $glyph.texturePositionClipSpace.x;\n      array[$i + 6] = $glyph.texturePositionClipSpace.y;\n      // a_texsize\n      array[$i + 7] = $glyph.sizeClipSpace.x;\n      array[$i + 8] = $glyph.sizeClipSpace.y;\n    }\n    // a_cellpos only changes on resize\n\n    // Reduce scale horizontally for wide glyphs printed in cells that would overlap with the\n    // following cell (ie. the width is not 2).\n    if (this._optionsService.rawOptions.rescaleOverlappingGlyphs) {\n      if (allowRescaling(code, width, $glyph.size.x, this._dimensions.device.cell.width)) {\n        array[$i + 2] = (this._dimensions.device.cell.width - 1) / this._dimensions.device.canvas.width; // - 1 to improve readability\n      }\n    }\n  }\n\n  public clear(): void {\n    const terminal = this._terminal;\n    const newCount = terminal.cols * terminal.rows * INDICES_PER_CELL;\n\n    // Clear vertices\n    if (this._vertices.count !== newCount) {\n      this._vertices.attributes = new Float32Array(newCount);\n    } else {\n      this._vertices.attributes.fill(0);\n    }\n    let i = 0;\n    for (; i < this._vertices.attributesBuffers.length; i++) {\n      if (this._vertices.count !== newCount) {\n        this._vertices.attributesBuffers[i] = new Float32Array(newCount);\n      } else {\n        this._vertices.attributesBuffers[i].fill(0);\n      }\n    }\n    this._vertices.count = newCount;\n    i = 0;\n    for (let y = 0; y < terminal.rows; y++) {\n      for (let x = 0; x < terminal.cols; x++) {\n        this._vertices.attributes[i + 9] = x / terminal.cols;\n        this._vertices.attributes[i + 10] = y / terminal.rows;\n        i += INDICES_PER_CELL;\n      }\n    }\n  }\n\n  public handleResize(): void {\n    const gl = this._gl;\n    gl.useProgram(this._program);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n    this.clear();\n  }\n\n  public render(renderModel: IRenderModel): void {\n    if (!this._atlas) {\n      return;\n    }\n\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Alternate buffers each frame as the active buffer gets locked while it's in use by the GPU\n    this._activeBuffer = (this._activeBuffer + 1) % 2;\n    const activeBuffer = this._vertices.attributesBuffers[this._activeBuffer];\n\n    // Copy data for each cell of each line up to its line length (the last non-whitespace cell)\n    // from the attributes buffer into activeBuffer, which is the one that gets bound to the GPU.\n    // The reasons for this are as follows:\n    // - So the active buffer can be alternated so we don't get blocked on rendering finishing\n    // - To copy either the normal attributes buffer or the selection attributes buffer when there\n    //   is a selection\n    // - So we don't send vertices for all the line-ending whitespace to the GPU\n    let bufferLength = 0;\n    for (let y = 0; y < renderModel.lineLengths.length; y++) {\n      const si = y * this._terminal.cols * INDICES_PER_CELL;\n      const sub = this._vertices.attributes.subarray(si, si + renderModel.lineLengths[y] * INDICES_PER_CELL);\n      activeBuffer.set(sub, bufferLength);\n      bufferLength += sub.length;\n    }\n\n    // Bind the attributes buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, activeBuffer.subarray(0, bufferLength), gl.STREAM_DRAW);\n\n    // Bind the atlas page texture if they have changed\n    for (let i = 0; i < this._atlas.pages.length; i++) {\n      if (this._atlas.pages[i].version !== this._atlasTextures[i].version) {\n        this._bindAtlasPageTexture(gl, this._atlas, i);\n      }\n    }\n\n    // Draw the viewport\n    gl.drawElementsInstanced(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_BYTE, 0, bufferLength / INDICES_PER_CELL);\n  }\n\n  public setAtlas(atlas: ITextureAtlas): void {\n    this._atlas = atlas;\n    for (const glTexture of this._atlasTextures) {\n      glTexture.version = -1;\n    }\n  }\n\n  private _bindAtlasPageTexture(gl: IWebGL2RenderingContext, atlas: ITextureAtlas, i: number): void {\n    gl.activeTexture(gl.TEXTURE0 + i);\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTextures[i].texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, atlas.pages[i].canvas);\n    gl.generateMipmap(gl.TEXTURE_2D);\n    this._atlasTextures[i].version = atlas.pages[i].version;\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { IThemeService } from 'browser/services/Services';\nimport { ReadonlyColorSet } from 'browser/Types';\nimport { Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IColor } from 'common/Types';\nimport { Terminal } from '@xterm/xterm';\nimport { RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { IRenderModel, IWebGL2RenderingContext, IWebGLVertexArrayObject } from './Types';\nimport { createProgram, expandFloat32Array, PROJECTION_MATRIX } from './WebglUtils';\n\nconst enum VertexAttribLocations {\n  POSITION = 0,\n  SIZE = 1,\n  COLOR = 2,\n  UNIT_QUAD = 3\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.POSITION}) in vec2 a_position;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.COLOR}) in vec4 a_color;\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\n\nuniform mat4 u_projection;\n\nout vec4 v_color;\n\nvoid main() {\n  vec2 zeroToOne = a_position + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_color = a_color;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = v_color;\n}`;\n\nconst INDICES_PER_RECTANGLE = 8;\nconst BYTES_PER_RECTANGLE = INDICES_PER_RECTANGLE * Float32Array.BYTES_PER_ELEMENT;\n\nconst INITIAL_BUFFER_RECTANGLE_CAPACITY = 20 * INDICES_PER_RECTANGLE;\n\nclass Vertices {\n  public attributes: Float32Array;\n  public count: number;\n\n  constructor() {\n    this.attributes = new Float32Array(INITIAL_BUFFER_RECTANGLE_CAPACITY);\n    this.count = 0;\n  }\n}\n\n// Work variables to avoid garbage collection\nlet $rgba = 0;\nlet $x1 = 0;\nlet $y1 = 0;\nlet $r = 0;\nlet $g = 0;\nlet $b = 0;\nlet $a = 0;\n\nexport class RectangleRenderer extends Disposable {\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _attributesBuffer: WebGLBuffer;\n  private _projectionLocation: WebGLUniformLocation;\n  private _bgFloat!: Float32Array;\n  private _cursorFloat!: Float32Array;\n\n  private _vertices: Vertices = new Vertices();\n  private _verticesCursor: Vertices = new Vertices();\n\n  constructor(\n    private _terminal: Terminal,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions,\n    private readonly _themeService: IThemeService\n  ) {\n    super();\n\n    const gl = this._gl;\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this.register(toDisposable(() => gl.deleteProgram(this._program)));\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(unitQuadVerticesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertices to allow is to draw 2 triangles from the vertices via a\n    // triangle strip\n    const unitQuadElementIndices = new Uint8Array([0, 1, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(elementIndicesBuffer)));\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    this.register(toDisposable(() => gl.deleteBuffer(this._attributesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.POSITION, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.POSITION, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.COLOR);\n    gl.vertexAttribPointer(VertexAttribLocations.COLOR, 4, gl.FLOAT, false, BYTES_PER_RECTANGLE, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.COLOR, 1);\n\n    this._updateCachedColors(_themeService.colors);\n    this.register(this._themeService.onChangeColors(e => {\n      this._updateCachedColors(e);\n      this._updateViewportRectangle();\n    }));\n  }\n\n  public renderBackgrounds(): void {\n    this._renderVertices(this._vertices);\n  }\n\n  public renderCursor(): void {\n    this._renderVertices(this._verticesCursor);\n  }\n\n  private _renderVertices(vertices: Vertices): void {\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n\n    // Bind attributes buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices.attributes, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_BYTE, 0, vertices.count);\n  }\n\n  public handleResize(): void {\n    this._updateViewportRectangle();\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n\n  private _updateCachedColors(colors: ReadonlyColorSet): void {\n    this._bgFloat = this._colorToFloat32Array(colors.background);\n    this._cursorFloat = this._colorToFloat32Array(colors.cursor);\n  }\n\n  private _updateViewportRectangle(): void {\n    // Set first rectangle that clears the screen\n    this._addRectangleFloat(\n      this._vertices.attributes,\n      0,\n      0,\n      0,\n      this._terminal.cols * this._dimensions.device.cell.width,\n      this._terminal.rows * this._dimensions.device.cell.height,\n      this._bgFloat\n    );\n  }\n\n  public updateBackgrounds(model: IRenderModel): void {\n    const terminal = this._terminal;\n    const vertices = this._vertices;\n\n    // Declare variable ahead of time to avoid garbage collection\n    let rectangleCount = 1;\n    let y: number;\n    let x: number;\n    let currentStartX: number;\n    let currentBg: number;\n    let currentFg: number;\n    let currentInverse: boolean;\n    let modelIndex: number;\n    let bg: number;\n    let fg: number;\n    let inverse: boolean;\n    let offset: number;\n\n    for (y = 0; y < terminal.rows; y++) {\n      currentStartX = -1;\n      currentBg = 0;\n      currentFg = 0;\n      currentInverse = false;\n      for (x = 0; x < terminal.cols; x++) {\n        modelIndex = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n        bg = model.cells[modelIndex + RENDER_MODEL_BG_OFFSET];\n        fg = model.cells[modelIndex + RENDER_MODEL_FG_OFFSET];\n        inverse = !!(fg & FgFlags.INVERSE);\n        if (bg !== currentBg || (fg !== currentFg && (currentInverse || inverse))) {\n          // A rectangle needs to be drawn if going from non-default to another color\n          if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n            offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n            this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, x, y);\n          }\n          currentStartX = x;\n          currentBg = bg;\n          currentFg = fg;\n          currentInverse = inverse;\n        }\n      }\n      // Finish rectangle if it's still going\n      if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n        offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n        this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, terminal.cols, y);\n      }\n    }\n    vertices.count = rectangleCount;\n  }\n\n  public updateCursor(model: IRenderModel): void {\n    const vertices = this._verticesCursor;\n    const cursor = model.cursor;\n    if (!cursor || cursor.style === 'block') {\n      vertices.count = 0;\n      return;\n    }\n\n    let offset: number;\n    let rectangleCount = 0;\n\n    if (cursor.style === 'bar' || cursor.style === 'outline') {\n      // Left edge\n      offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n      this._addRectangleFloat(\n        vertices.attributes,\n        offset,\n        cursor.x * this._dimensions.device.cell.width,\n        cursor.y * this._dimensions.device.cell.height,\n        cursor.style === 'bar' ? cursor.dpr * cursor.cursorWidth : cursor.dpr,\n        this._dimensions.device.cell.height,\n        this._cursorFloat\n      );\n    }\n    if (cursor.style === 'underline' || cursor.style === 'outline') {\n      // Bottom edge\n      offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n      this._addRectangleFloat(\n        vertices.attributes,\n        offset,\n        cursor.x * this._dimensions.device.cell.width,\n        (cursor.y + 1) * this._dimensions.device.cell.height - cursor.dpr,\n        cursor.width * this._dimensions.device.cell.width,\n        cursor.dpr,\n        this._cursorFloat\n      );\n    }\n    if (cursor.style === 'outline') {\n      // Top edge\n      offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n      this._addRectangleFloat(\n        vertices.attributes,\n        offset,\n        cursor.x * this._dimensions.device.cell.width,\n        cursor.y * this._dimensions.device.cell.height,\n        cursor.width * this._dimensions.device.cell.width,\n        cursor.dpr,\n        this._cursorFloat\n      );\n      // Right edge\n      offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n      this._addRectangleFloat(\n        vertices.attributes,\n        offset,\n        (cursor.x + cursor.width) * this._dimensions.device.cell.width - cursor.dpr,\n        cursor.y * this._dimensions.device.cell.height,\n        cursor.dpr,\n        this._dimensions.device.cell.height,\n        this._cursorFloat\n      );\n    }\n\n    vertices.count = rectangleCount;\n  }\n\n  private _updateRectangle(vertices: Vertices, offset: number, fg: number, bg: number, startX: number, endX: number, y: number): void {\n    if (fg & FgFlags.INVERSE) {\n      switch (fg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          $rgba = this._themeService.colors.ansi[fg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          $rgba = (fg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          $rgba = this._themeService.colors.foreground.rgba;\n      }\n    } else {\n      switch (bg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          $rgba = this._themeService.colors.ansi[bg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          $rgba = (bg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          $rgba = this._themeService.colors.background.rgba;\n      }\n    }\n\n    if (vertices.attributes.length < offset + 4) {\n      vertices.attributes = expandFloat32Array(vertices.attributes, this._terminal.rows * this._terminal.cols * INDICES_PER_RECTANGLE);\n    }\n    $x1 = startX * this._dimensions.device.cell.width;\n    $y1 = y * this._dimensions.device.cell.height;\n    $r = (($rgba >> 24) & 0xFF) / 255;\n    $g = (($rgba >> 16) & 0xFF) / 255;\n    $b = (($rgba >> 8 ) & 0xFF) / 255;\n    $a = 1;\n\n    this._addRectangle(vertices.attributes, offset, $x1, $y1, (endX - startX) * this._dimensions.device.cell.width, this._dimensions.device.cell.height, $r, $g, $b, $a);\n  }\n\n  private _addRectangle(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, r: number, g: number, b: number, a: number): void {\n    array[offset    ] = x1 / this._dimensions.device.canvas.width;\n    array[offset + 1] = y1 / this._dimensions.device.canvas.height;\n    array[offset + 2] = width / this._dimensions.device.canvas.width;\n    array[offset + 3] = height / this._dimensions.device.canvas.height;\n    array[offset + 4] = r;\n    array[offset + 5] = g;\n    array[offset + 6] = b;\n    array[offset + 7] = a;\n  }\n\n  private _addRectangleFloat(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, color: Float32Array): void {\n    array[offset    ] = x1 / this._dimensions.device.canvas.width;\n    array[offset + 1] = y1 / this._dimensions.device.canvas.height;\n    array[offset + 2] = width / this._dimensions.device.canvas.width;\n    array[offset + 3] = height / this._dimensions.device.canvas.height;\n    array[offset + 4] = color[0];\n    array[offset + 5] = color[1];\n    array[offset + 6] = color[2];\n    array[offset + 7] = color[3];\n  }\n\n  private _colorToFloat32Array(color: IColor): Float32Array {\n    return new Float32Array([\n      ((color.rgba >> 24) & 0xFF) / 255,\n      ((color.rgba >> 16) & 0xFF) / 255,\n      ((color.rgba >> 8 ) & 0xFF) / 255,\n      ((color.rgba      ) & 0xFF) / 255\n    ]);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICursorRenderModel, IRenderModel } from './Types';\nimport { ISelectionRenderModel } from 'browser/renderer/shared/Types';\nimport { createSelectionRenderModel } from 'browser/renderer/shared/SelectionRenderModel';\n\nexport const RENDER_MODEL_INDICIES_PER_CELL = 4;\nexport const RENDER_MODEL_BG_OFFSET = 1;\nexport const RENDER_MODEL_FG_OFFSET = 2;\nexport const RENDER_MODEL_EXT_OFFSET = 3;\n\nexport const COMBINED_CHAR_BIT_MASK = 0x80000000;\n\nexport class RenderModel implements IRenderModel {\n  public cells: Uint32Array;\n  public lineLengths: Uint32Array;\n  public selection: ISelectionRenderModel;\n  public cursor?: ICursorRenderModel;\n\n  constructor() {\n    this.cells = new Uint32Array(0);\n    this.lineLengths = new Uint32Array(0);\n    this.selection = createSelectionRenderModel();\n  }\n\n  public resize(cols: number, rows: number): void {\n    const indexCount = cols * rows * RENDER_MODEL_INDICIES_PER_CELL;\n    if (indexCount !== this.cells.length) {\n      this.cells = new Uint32Array(indexCount);\n      this.lineLengths = new Uint32Array(rows);\n    }\n  }\n\n  public clear(): void {\n    this.cells.fill(0, 0);\n    this.lineLengths.fill(0, 0);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { ITerminal } from 'browser/Types';\nimport { CellColorResolver } from 'browser/renderer/shared/CellColorResolver';\nimport { acquireTextureAtlas, removeTerminalFromCache } from 'browser/renderer/shared/CharAtlasCache';\nimport { CursorBlinkStateManager } from 'browser/renderer/shared/CursorBlinkStateManager';\nimport { observeDevicePixelDimensions } from 'browser/renderer/shared/DevicePixelObserver';\nimport { createRenderDimensions } from 'browser/renderer/shared/RendererUtils';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICharacterJoinerService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\nimport { Disposable, MutableDisposable, getDisposeArrayDisposable, toDisposable } from 'common/Lifecycle';\nimport { CharData, IBufferLine, ICellData } from 'common/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { CellData } from 'common/buffer/CellData';\nimport { Attributes, Content, NULL_CELL_CHAR, NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { Terminal } from '@xterm/xterm';\nimport { GlyphRenderer } from './GlyphRenderer';\nimport { RectangleRenderer } from './RectangleRenderer';\nimport { COMBINED_CHAR_BIT_MASK, RENDER_MODEL_BG_OFFSET, RENDER_MODEL_EXT_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL, RenderModel } from './RenderModel';\nimport { IWebGL2RenderingContext } from './Types';\nimport { LinkRenderLayer } from './renderLayer/LinkRenderLayer';\nimport { IRenderLayer } from './renderLayer/Types';\n\nexport class WebglRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _cursorBlinkStateManager: MutableDisposable<CursorBlinkStateManager> = new MutableDisposable();\n  private _charAtlasDisposable = this.register(new MutableDisposable());\n  private _charAtlas: ITextureAtlas | undefined;\n  private _devicePixelRatio: number;\n  private _observerDisposable = this.register(new MutableDisposable());\n\n  private _model: RenderModel = new RenderModel();\n  private _workCell: ICellData = new CellData();\n  private _workCell2: ICellData = new CellData();\n  private _cellColorResolver: CellColorResolver;\n\n  private _canvas: HTMLCanvasElement;\n  private _gl: IWebGL2RenderingContext;\n  private _rectangleRenderer: MutableDisposable<RectangleRenderer> = this.register(new MutableDisposable());\n  private _glyphRenderer: MutableDisposable<GlyphRenderer> = this.register(new MutableDisposable());\n\n  public readonly dimensions: IRenderDimensions;\n\n  private _core: ITerminal;\n  private _isAttached: boolean;\n  private _contextRestorationTimeout: number | undefined;\n\n  private readonly _onChangeTextureAtlas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onChangeTextureAtlas = this._onChangeTextureAtlas.event;\n  private readonly _onAddTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\n  private readonly _onRemoveTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onRemoveTextureAtlasCanvas = this._onRemoveTextureAtlasCanvas.event;\n  private readonly _onRequestRedraw = this.register(new EventEmitter<IRequestRedrawEvent>());\n  public readonly onRequestRedraw = this._onRequestRedraw.event;\n  private readonly _onContextLoss = this.register(new EventEmitter<void>());\n  public readonly onContextLoss = this._onContextLoss.event;\n\n  constructor(\n    private _terminal: Terminal,\n    private readonly _characterJoinerService: ICharacterJoinerService,\n    private readonly _charSizeService: ICharSizeService,\n    private readonly _coreBrowserService: ICoreBrowserService,\n    private readonly _coreService: ICoreService,\n    private readonly _decorationService: IDecorationService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _themeService: IThemeService,\n    preserveDrawingBuffer?: boolean\n  ) {\n    super();\n\n    this.register(this._themeService.onChangeColors(() => this._handleColorChange()));\n\n    this._cellColorResolver = new CellColorResolver(this._terminal, this._optionsService, this._model.selection, this._decorationService, this._coreBrowserService, this._themeService);\n\n    this._core = (this._terminal as any)._core;\n\n    this._renderLayers = [\n      new LinkRenderLayer(this._core.screenElement!, 2, this._terminal, this._core.linkifier!, this._coreBrowserService, _optionsService, this._themeService)\n    ];\n    this.dimensions = createRenderDimensions();\n    this._devicePixelRatio = this._coreBrowserService.dpr;\n    this._updateDimensions();\n    this._updateCursorBlink();\n    this.register(_optionsService.onOptionChange(() => this._handleOptionsChanged()));\n\n    this._canvas = this._coreBrowserService.mainDocument.createElement('canvas');\n\n    const contextAttributes = {\n      antialias: false,\n      depth: false,\n      preserveDrawingBuffer\n    };\n    this._gl = this._canvas.getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n    if (!this._gl) {\n      throw new Error('WebGL2 not supported ' + this._gl);\n    }\n\n    this.register(addDisposableDomListener(this._canvas, 'webglcontextlost', (e) => {\n      console.log('webglcontextlost event received');\n      // Prevent the default behavior in order to enable WebGL context restoration.\n      e.preventDefault();\n      // Wait a few seconds to see if the 'webglcontextrestored' event is fired.\n      // If not, dispatch the onContextLoss notification to observers.\n      this._contextRestorationTimeout = setTimeout(() => {\n        this._contextRestorationTimeout = undefined;\n        console.warn('webgl context not restored; firing onContextLoss');\n        this._onContextLoss.fire(e);\n      }, 3000 /* ms */);\n    }));\n    this.register(addDisposableDomListener(this._canvas, 'webglcontextrestored', (e) => {\n      console.warn('webglcontextrestored event received');\n      clearTimeout(this._contextRestorationTimeout);\n      this._contextRestorationTimeout = undefined;\n      // The texture atlas and glyph renderer must be fully reinitialized\n      // because their contents have been lost.\n      removeTerminalFromCache(this._terminal);\n      this._initializeWebGLState();\n      this._requestRedrawViewport();\n    }));\n\n    this._observerDisposable.value = observeDevicePixelDimensions(this._canvas, this._coreBrowserService.window, (w, h) => this._setCanvasDevicePixelDimensions(w, h));\n    this.register(this._coreBrowserService.onWindowChange(w => {\n      this._observerDisposable.value = observeDevicePixelDimensions(this._canvas, w, (w, h) => this._setCanvasDevicePixelDimensions(w, h));\n    }));\n\n    this._core.screenElement!.appendChild(this._canvas);\n\n    [this._rectangleRenderer.value, this._glyphRenderer.value] = this._initializeWebGLState();\n\n    this._isAttached = this._coreBrowserService.window.document.body.contains(this._core.screenElement!);\n\n    this.register(toDisposable(() => {\n      for (const l of this._renderLayers) {\n        l.dispose();\n      }\n      this._canvas.parentElement?.removeChild(this._canvas);\n      removeTerminalFromCache(this._terminal);\n    }));\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._charAtlas?.pages[0].canvas;\n  }\n\n  private _handleColorChange(): void {\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._clearModel(true);\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== this._coreBrowserService.dpr) {\n      this._devicePixelRatio = this._coreBrowserService.dpr;\n      this.handleResize(this._terminal.cols, this._terminal.rows);\n    }\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    this._model.resize(this._terminal.cols, this._terminal.rows);\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this._terminal, this.dimensions);\n    }\n\n    // Resize the canvas\n    this._canvas.width = this.dimensions.device.canvas.width;\n    this._canvas.height = this.dimensions.device.canvas.height;\n    this._canvas.style.width = `${this.dimensions.css.canvas.width}px`;\n    this._canvas.style.height = `${this.dimensions.css.canvas.height}px`;\n\n    // Resize the screen\n    this._core.screenElement!.style.width = `${this.dimensions.css.canvas.width}px`;\n    this._core.screenElement!.style.height = `${this.dimensions.css.canvas.height}px`;\n\n    this._rectangleRenderer.value?.setDimensions(this.dimensions);\n    this._rectangleRenderer.value?.handleResize();\n    this._glyphRenderer.value?.setDimensions(this.dimensions);\n    this._glyphRenderer.value?.handleResize();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh. Resizing `_glyphRenderer` should clear it already,\n    // so there is no need to clear it again here.\n    this._clearModel(false);\n  }\n\n  public handleCharSizeChanged(): void {\n    this.handleResize(this._terminal.cols, this._terminal.rows);\n  }\n\n  public handleBlur(): void {\n    for (const l of this._renderLayers) {\n      l.handleBlur(this._terminal);\n    }\n    this._cursorBlinkStateManager.value?.pause();\n    // Request a redraw for active/inactive selection background\n    this._requestRedrawViewport();\n  }\n\n  public handleFocus(): void {\n    for (const l of this._renderLayers) {\n      l.handleFocus(this._terminal);\n    }\n    this._cursorBlinkStateManager.value?.resume();\n    // Request a redraw for active/inactive selection background\n    this._requestRedrawViewport();\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    for (const l of this._renderLayers) {\n      l.handleSelectionChanged(this._terminal, start, end, columnSelectMode);\n    }\n    this._model.selection.update(this._core, start, end, columnSelectMode);\n    this._requestRedrawViewport();\n  }\n\n  public handleCursorMove(): void {\n    for (const l of this._renderLayers) {\n      l.handleCursorMove(this._terminal);\n    }\n    this._cursorBlinkStateManager.value?.restartBlinkAnimation();\n  }\n\n  private _handleOptionsChanged(): void {\n    this._updateDimensions();\n    this._refreshCharAtlas();\n    this._updateCursorBlink();\n  }\n\n  /**\n   * Initializes members dependent on WebGL context state.\n   */\n  private _initializeWebGLState(): [RectangleRenderer, GlyphRenderer] {\n    this._rectangleRenderer.value = new RectangleRenderer(this._terminal, this._gl, this.dimensions, this._themeService);\n    this._glyphRenderer.value = new GlyphRenderer(this._terminal, this._gl, this.dimensions, this._optionsService);\n\n    // Update dimensions and acquire char atlas\n    this.handleCharSizeChanged();\n\n    return [this._rectangleRenderer.value, this._glyphRenderer.value];\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   */\n  private _refreshCharAtlas(): void {\n    if (this.dimensions.device.char.width <= 0 && this.dimensions.device.char.height <= 0) {\n      // Mark as not attached so char atlas gets refreshed on next render\n      this._isAttached = false;\n      return;\n    }\n\n    const atlas = acquireTextureAtlas(\n      this._terminal,\n      this._optionsService.rawOptions,\n      this._themeService.colors,\n      this.dimensions.device.cell.width,\n      this.dimensions.device.cell.height,\n      this.dimensions.device.char.width,\n      this.dimensions.device.char.height,\n      this._coreBrowserService.dpr\n    );\n    if (this._charAtlas !== atlas) {\n      this._onChangeTextureAtlas.fire(atlas.pages[0].canvas);\n      this._charAtlasDisposable.value = getDisposeArrayDisposable([\n        forwardEvent(atlas.onAddTextureAtlasCanvas, this._onAddTextureAtlasCanvas),\n        forwardEvent(atlas.onRemoveTextureAtlasCanvas, this._onRemoveTextureAtlasCanvas)\n      ]);\n    }\n    this._charAtlas = atlas;\n    this._charAtlas.warmUp();\n    this._glyphRenderer.value?.setAtlas(this._charAtlas);\n  }\n\n  /**\n   * Clear the model.\n   * @param clearGlyphRenderer Whether to also clear the glyph renderer. This\n   * should be true generally to make sure it is in the same state as the model.\n   */\n  private _clearModel(clearGlyphRenderer: boolean): void {\n    this._model.clear();\n    if (clearGlyphRenderer) {\n      this._glyphRenderer.value?.clear();\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    this._charAtlas?.clearTexture();\n    this._clearModel(true);\n    this._requestRedrawViewport();\n  }\n\n  public clear(): void {\n    this._clearModel(true);\n    for (const l of this._renderLayers) {\n      l.reset(this._terminal);\n    }\n\n    this._cursorBlinkStateManager.value?.restartBlinkAnimation();\n    this._updateCursorBlink();\n  }\n\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    return -1;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): boolean {\n    return false;\n  }\n\n  public renderRows(start: number, end: number): void {\n    if (!this._isAttached) {\n      if (this._coreBrowserService.window.document.body.contains(this._core.screenElement!) && this._charSizeService.width && this._charSizeService.height) {\n        this._updateDimensions();\n        this._refreshCharAtlas();\n        this._isAttached = true;\n      } else {\n        return;\n      }\n    }\n\n    // Update render layers\n    for (const l of this._renderLayers) {\n      l.handleGridChanged(this._terminal, start, end);\n    }\n\n    if (!this._glyphRenderer.value || !this._rectangleRenderer.value) {\n      return;\n    }\n\n    // Tell renderer the frame is beginning\n    // upon a model clear also refresh the full viewport model\n    // (also triggered by an atlas page merge, part of #4480)\n    if (this._glyphRenderer.value.beginFrame()) {\n      this._clearModel(true);\n      this._updateModel(0, this._terminal.rows - 1);\n    } else {\n      // just update changed lines to draw\n      this._updateModel(start, end);\n    }\n\n    // Render\n    this._rectangleRenderer.value.renderBackgrounds();\n    this._glyphRenderer.value.render(this._model);\n    if (!this._cursorBlinkStateManager.value || this._cursorBlinkStateManager.value.isCursorVisible) {\n      this._rectangleRenderer.value.renderCursor();\n    }\n  }\n\n  private _updateCursorBlink(): void {\n    if (this._terminal.options.cursorBlink) {\n      this._cursorBlinkStateManager.value = new CursorBlinkStateManager(() => {\n        this._requestRedrawCursor();\n      }, this._coreBrowserService);\n    } else {\n      this._cursorBlinkStateManager.clear();\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._requestRedrawCursor();\n  }\n\n  private _updateModel(start: number, end: number): void {\n    const terminal = this._core;\n    let cell: ICellData = this._workCell;\n\n    // Declare variable ahead of time to avoid garbage collection\n    let lastBg: number;\n    let y: number;\n    let row: number;\n    let line: IBufferLine;\n    let joinedRanges: [number, number][];\n    let isJoined: boolean;\n    let lastCharX: number;\n    let range: [number, number];\n    let chars: string;\n    let code: number;\n    let width: number;\n    let i: number;\n    let x: number;\n    let j: number;\n    start = clamp(start, terminal.rows - 1, 0);\n    end = clamp(end, terminal.rows - 1, 0);\n\n    const cursorY = this._terminal.buffer.active.baseY + this._terminal.buffer.active.cursorY;\n    const viewportRelativeCursorY = cursorY - terminal.buffer.ydisp;\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(this._terminal.buffer.active.cursorX, terminal.cols - 1);\n    let lastCursorX = -1;\n    const isCursorVisible =\n      this._coreService.isCursorInitialized &&\n      !this._coreService.isCursorHidden &&\n      (!this._cursorBlinkStateManager.value || this._cursorBlinkStateManager.value.isCursorVisible);\n    this._model.cursor = undefined;\n    let modelUpdated = false;\n\n    for (y = start; y <= end; y++) {\n      row = y + terminal.buffer.ydisp;\n      line = terminal.buffer.lines.get(row)!;\n      this._model.lineLengths[y] = 0;\n      joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (x = 0; x < terminal.cols; x++) {\n        lastBg = this._cellColorResolver.result.bg;\n        line.loadCell(x, cell);\n\n        if (x === 0) {\n          lastBg = this._cellColorResolver.result.bg;\n        }\n\n        // If true, indicates that the current character(s) to draw were joined.\n        isJoined = false;\n        lastCharX = x;\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly.\n          cell = new JoinedCellData(\n            cell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        chars = cell.getChars();\n        code = cell.getCode();\n        i = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n\n        // Load colors/resolve overrides into work colors\n        this._cellColorResolver.resolve(cell, x, row, this.dimensions.device.cell.width);\n\n        // Override colors for cursor cell\n        if (isCursorVisible && row === cursorY) {\n          if (x === cursorX) {\n            this._model.cursor = {\n              x: cursorX,\n              y: viewportRelativeCursorY,\n              width: cell.getWidth(),\n              style: this._coreBrowserService.isFocused ?\n                (terminal.options.cursorStyle || 'block') : terminal.options.cursorInactiveStyle,\n              cursorWidth: terminal.options.cursorWidth,\n              dpr: this._devicePixelRatio\n            };\n            lastCursorX = cursorX + cell.getWidth() - 1;\n          }\n          if (x >= cursorX && x <= lastCursorX &&\n              ((this._coreBrowserService.isFocused &&\n              (terminal.options.cursorStyle || 'block') === 'block') ||\n              (this._coreBrowserService.isFocused === false &&\n              terminal.options.cursorInactiveStyle === 'block'))) {\n            this._cellColorResolver.result.fg =\n              Attributes.CM_RGB | (this._themeService.colors.cursorAccent.rgba >> 8 & Attributes.RGB_MASK);\n            this._cellColorResolver.result.bg =\n              Attributes.CM_RGB | (this._themeService.colors.cursor.rgba >> 8 & Attributes.RGB_MASK);\n          }\n        }\n\n        if (code !== NULL_CELL_CODE) {\n          this._model.lineLengths[y] = x + 1;\n        }\n\n        // Nothing has changed, no updates needed\n        if (this._model.cells[i] === code &&\n            this._model.cells[i + RENDER_MODEL_BG_OFFSET] === this._cellColorResolver.result.bg &&\n            this._model.cells[i + RENDER_MODEL_FG_OFFSET] === this._cellColorResolver.result.fg &&\n            this._model.cells[i + RENDER_MODEL_EXT_OFFSET] === this._cellColorResolver.result.ext) {\n          continue;\n        }\n\n        modelUpdated = true;\n\n        // Flag combined chars with a bit mask so they're easily identifiable\n        if (chars.length > 1) {\n          code |= COMBINED_CHAR_BIT_MASK;\n        }\n\n        // Cache the results in the model\n        this._model.cells[i] = code;\n        this._model.cells[i + RENDER_MODEL_BG_OFFSET] = this._cellColorResolver.result.bg;\n        this._model.cells[i + RENDER_MODEL_FG_OFFSET] = this._cellColorResolver.result.fg;\n        this._model.cells[i + RENDER_MODEL_EXT_OFFSET] = this._cellColorResolver.result.ext;\n\n        width = cell.getWidth();\n        this._glyphRenderer.value!.updateCell(x, y, code, this._cellColorResolver.result.bg, this._cellColorResolver.result.fg, this._cellColorResolver.result.ext, chars, width, lastBg);\n\n        if (isJoined) {\n          // Restore work cell\n          cell = this._workCell;\n\n          // Null out non-first cells\n          for (x++; x < lastCharX; x++) {\n            j = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n            this._glyphRenderer.value!.updateCell(x, y, NULL_CELL_CODE, 0, 0, 0, NULL_CELL_CHAR, 0, 0);\n            this._model.cells[j] = NULL_CELL_CODE;\n            this._model.cells[j + RENDER_MODEL_BG_OFFSET] = this._cellColorResolver.result.bg;\n            this._model.cells[j + RENDER_MODEL_FG_OFFSET] = this._cellColorResolver.result.fg;\n            this._model.cells[j + RENDER_MODEL_EXT_OFFSET] = this._cellColorResolver.result.ext;\n          }\n        }\n      }\n    }\n    if (modelUpdated) {\n      this._rectangleRenderer.value!.updateBackgrounds(this._model);\n    }\n    this._rectangleRenderer.value!.updateCursor(this._model);\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    // Perform a new measure if the CharMeasure dimensions are not yet available\n    if (!this._charSizeService.width || !this._charSizeService.height) {\n      return;\n    }\n\n    // Calculate the device character width. Width is floored as it must be drawn to an integer grid\n    // in order for the char atlas glyphs to not be blurry.\n    this.dimensions.device.char.width = Math.floor(this._charSizeService.width * this._devicePixelRatio);\n\n    // Calculate the device character height. Height is ceiled in case devicePixelRatio is a\n    // floating point number in order to ensure there is enough space to draw the character to the\n    // cell.\n    this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * this._devicePixelRatio);\n\n    // Calculate the device cell height, if lineHeight is _not_ 1, the resulting value will be\n    // floored since lineHeight can never be lower then 1, this guarentees the device cell height\n    // will always be larger than device char height.\n    this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight);\n\n    // Calculate the y offset within a cell that glyph should draw at in order for it to be centered\n    // correctly within the cell.\n    this.dimensions.device.char.top = this._optionsService.rawOptions.lineHeight === 1 ? 0 : Math.round((this.dimensions.device.cell.height - this.dimensions.device.char.height) / 2);\n\n    // Calculate the device cell width, taking the letterSpacing into account.\n    this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing);\n\n    // Calculate the x offset with a cell that text should draw from in order for it to be centered\n    // correctly within the cell.\n    this.dimensions.device.char.left = Math.floor(this._optionsService.rawOptions.letterSpacing / 2);\n\n    // Recalculate the canvas dimensions, the device dimensions define the actual number of pixel in\n    // the canvas\n    this.dimensions.device.canvas.height = this._terminal.rows * this.dimensions.device.cell.height;\n    this.dimensions.device.canvas.width = this._terminal.cols * this.dimensions.device.cell.width;\n\n    // The the size of the canvas on the page. It's important that this rounds to nearest integer\n    // and not ceils as browsers often have floating point precision issues where\n    // `window.devicePixelRatio` ends up being something like `1.100000023841858` for example, when\n    // it's actually 1.1. Ceiling may causes blurriness as the backing canvas image is 1 pixel too\n    // large for the canvas element size.\n    this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / this._devicePixelRatio);\n    this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / this._devicePixelRatio);\n\n    // Get the CSS dimensions of an individual cell. This needs to be derived from the calculated\n    // device pixel canvas value above. CharMeasure.width/height by itself is insufficient when the\n    // page is not at 100% zoom level as CharMeasure is measured in CSS pixels, but the actual char\n    // size on the canvas can differ.\n    this.dimensions.css.cell.height = this.dimensions.device.cell.height / this._devicePixelRatio;\n    this.dimensions.css.cell.width = this.dimensions.device.cell.width / this._devicePixelRatio;\n  }\n\n  private _setCanvasDevicePixelDimensions(width: number, height: number): void {\n    if (this._canvas.width === width && this._canvas.height === height) {\n      return;\n    }\n    // While the actual canvas size has changed, keep device canvas dimensions as the value before\n    // the change as it's an exact multiple of the cell sizes.\n    this._canvas.width = width;\n    this._canvas.height = height;\n    this._requestRedrawViewport();\n  }\n\n  private _requestRedrawViewport(): void {\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  private _requestRedrawCursor(): void {\n    const cursorY = this._terminal.buffer.active.cursorY;\n    this._onRequestRedraw.fire({ start: cursorY, end: cursorY });\n  }\n}\n\n// TODO: Share impl with core\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\n\n/**\n * A matrix that when multiplies will translate 0-1 coordinates (left to right,\n * top to bottom) to clip space.\n */\nexport const PROJECTION_MATRIX = new Float32Array([\n  2, 0, 0, 0,\n  0, -2, 0, 0,\n  0, 0, 1, 0,\n  -1, 1, 0, 1\n]);\n\nexport function createProgram(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string): WebGLProgram | undefined {\n  const program = throwIfFalsy(gl.createProgram());\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource)));\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource)));\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | undefined {\n  const shader = throwIfFalsy(gl.createShader(type));\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nexport function expandFloat32Array(source: Float32Array, max: number): Float32Array {\n  const newLength = Math.min(source.length * 2, max);\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < source.length; i++) {\n    newArray[i] = source[i];\n  }\n  return newArray;\n}\n\nexport class GLTexture {\n  public texture: WebGLTexture;\n  public version: number;\n\n  constructor(texture: WebGLTexture) {\n    this.texture = texture;\n    this.version = -1;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ReadonlyColorSet } from 'browser/Types';\nimport { acquireTextureAtlas } from 'browser/renderer/shared/CharAtlasCache';\nimport { TEXT_BASELINE } from 'browser/renderer/shared/Constants';\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { IRenderDimensions, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { CellData } from 'common/buffer/CellData';\nimport { IOptionsService } from 'common/services/Services';\nimport { Terminal } from '@xterm/xterm';\nimport { IRenderLayer } from './Types';\n\nexport abstract class BaseRenderLayer extends Disposable implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _deviceCharWidth: number = 0;\n  private _deviceCharHeight: number = 0;\n  private _deviceCellWidth: number = 0;\n  private _deviceCellHeight: number = 0;\n  private _deviceCharLeft: number = 0;\n  private _deviceCharTop: number = 0;\n\n  protected _charAtlas: ITextureAtlas | undefined;\n\n  constructor(\n    terminal: Terminal,\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected readonly _coreBrowserService: ICoreBrowserService,\n    protected readonly _optionsService: IOptionsService,\n    protected readonly _themeService: IThemeService\n  ) {\n    super();\n    this._canvas = this._coreBrowserService.mainDocument.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n    this.register(this._themeService.onChangeColors(e => {\n      this._refreshCharAtlas(terminal, e);\n      this.reset(terminal);\n    }));\n    this.register(toDisposable(() => {\n      this._canvas.remove();\n    }));\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public handleBlur(terminal: Terminal): void {}\n  public handleFocus(terminal: Terminal): void {}\n  public handleCursorMove(terminal: Terminal): void {}\n  public handleGridChanged(terminal: Terminal, startRow: number, endRow: number): void {}\n  public handleSelectionChanged(terminal: Terminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {}\n\n  protected _setTransparency(terminal: Terminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._themeService.colors);\n    this.handleGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: Terminal, colorSet: ReadonlyColorSet): void {\n    if (this._deviceCharWidth <= 0 && this._deviceCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireTextureAtlas(terminal, this._optionsService.rawOptions, colorSet, this._deviceCellWidth, this._deviceCellHeight, this._deviceCharWidth, this._deviceCharHeight, this._coreBrowserService.dpr);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    this._deviceCellWidth = dim.device.cell.width;\n    this._deviceCellHeight = dim.device.cell.height;\n    this._deviceCharWidth = dim.device.char.width;\n    this._deviceCharHeight = dim.device.char.height;\n    this._deviceCharLeft = dim.device.char.left;\n    this._deviceCharTop = dim.device.char.top;\n    this._canvas.width = dim.device.canvas.width;\n    this._canvas.height = dim.device.canvas.height;\n    this._canvas.style.width = `${dim.css.canvas.width}px`;\n    this._canvas.style.height = `${dim.css.canvas.height}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(terminal, this._themeService.colors);\n  }\n\n  public abstract reset(terminal: Terminal): void;\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._deviceCellWidth,\n      (y + 1) * this._deviceCellHeight - this._coreBrowserService.dpr - 1 /* Ensure it's drawn within the cell */,\n      width * this._deviceCellWidth,\n      this._coreBrowserService.dpr);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._themeService.colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._deviceCellWidth,\n        y * this._deviceCellHeight,\n        width * this._deviceCellWidth,\n        height * this._deviceCellHeight);\n    } else {\n      this._ctx.fillStyle = this._themeService.colors.background.css;\n      this._ctx.fillRect(\n        x * this._deviceCellWidth,\n        y * this._deviceCellHeight,\n        width * this._deviceCellWidth,\n        height * this._deviceCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   */\n  protected _fillCharTrueColor(terminal: Terminal, cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false, false);\n    this._ctx.textBaseline = TEXT_BASELINE;\n    this._clipCell(x, y, cell.getWidth());\n    this._ctx.fillText(\n      cell.getChars(),\n      x * this._deviceCellWidth + this._deviceCharLeft,\n      y * this._deviceCellHeight + this._deviceCharTop + this._deviceCharHeight);\n  }\n\n  /**\n   * Clips a cell to ensure no pixels will be drawn outside of it.\n   * @param x The column to clip.\n   * @param y The row to clip.\n   * @param width The number of columns to clip.\n   */\n  private _clipCell(x: number, y: number, width: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      x * this._deviceCellWidth,\n      y * this._deviceCellHeight,\n      width * this._deviceCellWidth,\n      this._deviceCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: Terminal, isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${terminal.options.fontSize! * this._coreBrowserService.dpr}px ${terminal.options.fontFamily}`;\n  }\n}\n\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { is256Color } from 'browser/renderer/shared/CharAtlasUtils';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { ILinkifier2, ILinkifierEvent } from 'browser/Types';\nimport { IOptionsService } from 'common/services/Services';\nimport { Terminal } from '@xterm/xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    terminal: Terminal,\n    linkifier2: ILinkifier2,\n    coreBrowserService: ICoreBrowserService,\n    optionsService: IOptionsService,\n    themeService: IThemeService\n  ) {\n    super(terminal, container, 'link', zIndex, true, coreBrowserService, optionsService, themeService);\n\n    this.register(linkifier2.onShowLinkUnderline(e => this._handleShowLinkUnderline(e)));\n    this.register(linkifier2.onHideLinkUnderline(e => this._handleHideLinkUnderline(e)));\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _handleShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._themeService.colors.background.css;\n    } else if (e.fg !== undefined && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._themeService.colors.ansi[e.fg!].css;\n    } else {\n      this._ctx.fillStyle = this._themeService.colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _handleHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param node The node to add a listener to.\n * @param type The event type.\n * @param handler The handler for the listener.\n * @param options The boolean or options object to pass on to the event\n * listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n", "import { ISelectionRenderModel } from 'browser/renderer/shared/Types';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { ReadonlyColorSet } from 'browser/Types';\nimport { Attributes, BgFlags, ExtFlags, FgFlags, NULL_CELL_CODE, UnderlineStyle } from 'common/buffer/Constants';\nimport { IDecorationService, IOptionsService } from 'common/services/Services';\nimport { ICellData } from 'common/Types';\nimport { Terminal } from '@xterm/xterm';\nimport { rgba } from 'common/Color';\nimport { treatGlyphAsBackgroundColor } from 'browser/renderer/shared/RendererUtils';\n\n// Work variables to avoid garbage collection\nlet $fg = 0;\nlet $bg = 0;\nlet $hasFg = false;\nlet $hasBg = false;\nlet $isSelected = false;\nlet $colors: ReadonlyColorSet | undefined;\nlet $variantOffset = 0;\n\nexport class CellColorResolver {\n  /**\n   * The shared result of the {@link resolve} call. This is only safe to use immediately after as\n   * any other calls will share object.\n   */\n  public readonly result: { fg: number, bg: number, ext: number } = {\n    fg: 0,\n    bg: 0,\n    ext: 0\n  };\n\n  constructor(\n    private readonly _terminal: Terminal,\n    private readonly _optionService: IOptionsService,\n    private readonly _selectionRenderModel: ISelectionRenderModel,\n    private readonly _decorationService: IDecorationService,\n    private readonly _coreBrowserService: ICoreBrowserService,\n    private readonly _themeService: IThemeService\n  ) {\n  }\n\n  /**\n   * Resolves colors for the cell, putting the result into the shared {@link result}. This resolves\n   * overrides, inverse and selection for the cell which can then be used to feed into the renderer.\n   */\n  public resolve(cell: ICellData, x: number, y: number, deviceCellWidth: number): void {\n    this.result.bg = cell.bg;\n    this.result.fg = cell.fg;\n    this.result.ext = cell.bg & BgFlags.HAS_EXTENDED ? cell.extended.ext : 0;\n    // Get any foreground/background overrides, this happens on the model to avoid spreading\n    // override logic throughout the different sub-renderers\n\n    // Reset overrides work variables\n    $bg = 0;\n    $fg = 0;\n    $hasBg = false;\n    $hasFg = false;\n    $isSelected = false;\n    $colors = this._themeService.colors;\n    $variantOffset = 0;\n\n    const code = cell.getCode();\n    if (code !== NULL_CELL_CODE && cell.extended.underlineStyle === UnderlineStyle.DOTTED) {\n      const lineWidth = Math.max(1, Math.floor(this._optionService.rawOptions.fontSize * this._coreBrowserService.dpr / 15));\n      $variantOffset = x * deviceCellWidth % (Math.round(lineWidth) * 2);\n    }\n\n    // Apply decorations on the bottom layer\n    this._decorationService.forEachDecorationAtCell(x, y, 'bottom', d => {\n      if (d.backgroundColorRGB) {\n        $bg = d.backgroundColorRGB.rgba >> 8 & Attributes.RGB_MASK;\n        $hasBg = true;\n      }\n      if (d.foregroundColorRGB) {\n        $fg = d.foregroundColorRGB.rgba >> 8 & Attributes.RGB_MASK;\n        $hasFg = true;\n      }\n    });\n\n    // Apply the selection color if needed\n    $isSelected = this._selectionRenderModel.isCellSelected(this._terminal, x, y);\n    if ($isSelected) {\n      // If the cell has a bg color, retain the color by blending it with the selection color\n      if (\n        (this.result.fg & FgFlags.INVERSE) ||\n        (this.result.bg & Attributes.CM_MASK) !== Attributes.CM_DEFAULT\n      ) {\n        // Resolve the standard bg color\n        if (this.result.fg & FgFlags.INVERSE) {\n          switch (this.result.fg & Attributes.CM_MASK) {\n            case Attributes.CM_P16:\n            case Attributes.CM_P256:\n              $bg = this._themeService.colors.ansi[this.result.fg & Attributes.PCOLOR_MASK].rgba;\n              break;\n            case Attributes.CM_RGB:\n              $bg = ((this.result.fg & Attributes.RGB_MASK) << 8) | 0xFF;\n              break;\n            case Attributes.CM_DEFAULT:\n            default:\n              $bg = this._themeService.colors.foreground.rgba;\n          }\n        } else {\n          switch (this.result.bg & Attributes.CM_MASK) {\n            case Attributes.CM_P16:\n            case Attributes.CM_P256:\n              $bg = this._themeService.colors.ansi[this.result.bg & Attributes.PCOLOR_MASK].rgba;\n              break;\n            case Attributes.CM_RGB:\n              $bg = ((this.result.bg & Attributes.RGB_MASK) << 8) | 0xFF;\n              break;\n            // No need to consider default bg color here as it's not possible\n          }\n        }\n        // Blend with selection bg color\n        $bg = rgba.blend(\n          $bg,\n          ((this._coreBrowserService.isFocused ? $colors.selectionBackgroundOpaque : $colors.selectionInactiveBackgroundOpaque).rgba & 0xFFFFFF00) | 0x80\n        ) >> 8 & Attributes.RGB_MASK;\n      } else {\n        $bg = (this._coreBrowserService.isFocused ? $colors.selectionBackgroundOpaque : $colors.selectionInactiveBackgroundOpaque).rgba >> 8 & Attributes.RGB_MASK;\n      }\n      $hasBg = true;\n\n      // Apply explicit selection foreground if present\n      if ($colors.selectionForeground) {\n        $fg = $colors.selectionForeground.rgba >> 8 & Attributes.RGB_MASK;\n        $hasFg = true;\n      }\n\n      // Overwrite fg as bg if it's a special decorative glyph (eg. powerline)\n      if (treatGlyphAsBackgroundColor(cell.getCode())) {\n        // Inverse default background should be treated as transparent\n        if (\n          (this.result.fg & FgFlags.INVERSE) &&\n          (this.result.bg & Attributes.CM_MASK) === Attributes.CM_DEFAULT\n        ) {\n          $fg = (this._coreBrowserService.isFocused ? $colors.selectionBackgroundOpaque : $colors.selectionInactiveBackgroundOpaque).rgba >> 8 & Attributes.RGB_MASK;\n        } else {\n\n          if (this.result.fg & FgFlags.INVERSE) {\n            switch (this.result.bg & Attributes.CM_MASK) {\n              case Attributes.CM_P16:\n              case Attributes.CM_P256:\n                $fg = this._themeService.colors.ansi[this.result.bg & Attributes.PCOLOR_MASK].rgba;\n                break;\n              case Attributes.CM_RGB:\n                $fg = ((this.result.bg & Attributes.RGB_MASK) << 8) | 0xFF;\n                break;\n              // No need to consider default bg color here as it's not possible\n            }\n          } else {\n            switch (this.result.fg & Attributes.CM_MASK) {\n              case Attributes.CM_P16:\n              case Attributes.CM_P256:\n                $fg = this._themeService.colors.ansi[this.result.fg & Attributes.PCOLOR_MASK].rgba;\n                break;\n              case Attributes.CM_RGB:\n                $fg = ((this.result.fg & Attributes.RGB_MASK) << 8) | 0xFF;\n                break;\n              case Attributes.CM_DEFAULT:\n              default:\n                $fg = this._themeService.colors.foreground.rgba;\n            }\n          }\n\n          $fg = rgba.blend(\n            $fg,\n            ((this._coreBrowserService.isFocused ? $colors.selectionBackgroundOpaque : $colors.selectionInactiveBackgroundOpaque).rgba & 0xFFFFFF00) | 0x80\n          ) >> 8 & Attributes.RGB_MASK;\n        }\n        $hasFg = true;\n      }\n    }\n\n    // Apply decorations on the top layer\n    this._decorationService.forEachDecorationAtCell(x, y, 'top', d => {\n      if (d.backgroundColorRGB) {\n        $bg = d.backgroundColorRGB.rgba >> 8 & Attributes.RGB_MASK;\n        $hasBg = true;\n      }\n      if (d.foregroundColorRGB) {\n        $fg = d.foregroundColorRGB.rgba >> 8 & Attributes.RGB_MASK;\n        $hasFg = true;\n      }\n    });\n\n    // Convert any overrides from rgba to the fg/bg packed format. This resolves the inverse flag\n    // ahead of time in order to use the correct cache key\n    if ($hasBg) {\n      if ($isSelected) {\n        // Non-RGB attributes from model + force non-dim + override + force RGB color mode\n        $bg = (cell.bg & ~Attributes.RGB_MASK & ~BgFlags.DIM) | $bg | Attributes.CM_RGB;\n      } else {\n        // Non-RGB attributes from model + override + force RGB color mode\n        $bg = (cell.bg & ~Attributes.RGB_MASK) | $bg | Attributes.CM_RGB;\n      }\n    }\n    if ($hasFg) {\n      // Non-RGB attributes from model + force disable inverse + override + force RGB color mode\n      $fg = (cell.fg & ~Attributes.RGB_MASK & ~FgFlags.INVERSE) | $fg | Attributes.CM_RGB;\n    }\n\n    // Handle case where inverse was specified by only one of bg override or fg override was set,\n    // resolving the other inverse color and setting the inverse flag if needed.\n    if (this.result.fg & FgFlags.INVERSE) {\n      if ($hasBg && !$hasFg) {\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\n        if ((this.result.bg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\n          $fg = (this.result.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | (($colors.background.rgba >> 8 & Attributes.RGB_MASK) & Attributes.RGB_MASK) | Attributes.CM_RGB;\n        } else {\n          $fg = (this.result.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | this.result.bg & (Attributes.RGB_MASK | Attributes.CM_MASK);\n        }\n        $hasFg = true;\n      }\n      if (!$hasBg && $hasFg) {\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\n        if ((this.result.fg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\n          $bg = (this.result.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | (($colors.foreground.rgba >> 8 & Attributes.RGB_MASK) & Attributes.RGB_MASK) | Attributes.CM_RGB;\n        } else {\n          $bg = (this.result.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | this.result.fg & (Attributes.RGB_MASK | Attributes.CM_MASK);\n        }\n        $hasBg = true;\n      }\n    }\n\n    // Release object\n    $colors = undefined;\n\n    // Use the override if it exists\n    this.result.bg = $hasBg ? $bg : this.result.bg;\n    this.result.fg = $hasFg ? $fg : this.result.fg;\n\n    // Reset overrides variantOffset\n    this.result.ext &= ~ExtFlags.VARIANT_OFFSET;\n    this.result.ext |= ($variantOffset << 29) & ExtFlags.VARIANT_OFFSET;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { TextureAtlas } from 'browser/renderer/shared/TextureAtlas';\nimport { ITerminalOptions, Terminal } from '@xterm/xterm';\nimport { ITerminal, ReadonlyColorSet } from 'browser/Types';\nimport { ICharAtlasConfig, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { generateConfig, configEquals } from 'browser/renderer/shared/CharAtlasUtils';\n\ninterface ITextureAtlasCacheEntry {\n  atlas: ITextureAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ITextureAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n */\nexport function acquireTextureAtlas(\n  terminal: Terminal,\n  options: Required<ITerminalOptions>,\n  colors: ReadonlyColorSet,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  deviceCharWidth: number,\n  deviceCharHeight: number,\n  devicePixelRatio: number\n): ITextureAtlas {\n  const newConfig = generateConfig(deviceCellWidth, deviceCellHeight, deviceCharWidth, deviceCharHeight, options, colors, devicePixelRatio);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const core: ITerminal = (terminal as any)._core;\n  const newEntry: ITextureAtlasCacheEntry = {\n    atlas: new TextureAtlas(document, newConfig, core.unicodeService),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { ITerminalOptions } from '@xterm/xterm';\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { NULL_COLOR } from 'common/Color';\n\nexport function generateConfig(deviceCellWidth: number, deviceCellHeight: number, deviceCharWidth: number, deviceCharHeight: number, options: Required<ITerminalOptions>, colors: ReadonlyColorSet, devicePixelRatio: number): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selectionForeground: NULL_COLOR,\n    selectionBackgroundTransparent: NULL_COLOR,\n    selectionBackgroundOpaque: NULL_COLOR,\n    selectionInactiveBackgroundTransparent: NULL_COLOR,\n    selectionInactiveBackgroundOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache,\n    halfContrastCache: colors.halfContrastCache\n  };\n  return {\n    customGlyphs: options.customGlyphs,\n    devicePixelRatio,\n    letterSpacing: options.letterSpacing,\n    lineHeight: options.lineHeight,\n    deviceCellWidth: deviceCellWidth,\n    deviceCellHeight: deviceCellHeight,\n    deviceCharWidth: deviceCharWidth,\n    deviceCharHeight: deviceCharHeight,\n    fontFamily: options.fontFamily,\n    fontSize: options.fontSize,\n    fontWeight: options.fontWeight,\n    fontWeightBold: options.fontWeightBold,\n    allowTransparency: options.allowTransparency,\n    drawBoldTextInBrightColors: options.drawBoldTextInBrightColors,\n    minimumContrastRatio: options.minimumContrastRatio,\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.customGlyphs === b.customGlyphs &&\n      a.lineHeight === b.lineHeight &&\n      a.letterSpacing === b.letterSpacing &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.deviceCharWidth === b.deviceCharWidth &&\n      a.deviceCharHeight === b.deviceCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground.rgba === b.colors.foreground.rgba &&\n      a.colors.background.rgba === b.colors.background.rgba;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge\n// would result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreBrowserService } from 'browser/services/Services';\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    private _renderCallback: () => void,\n    private _coreBrowserService: ICoreBrowserService\n  ) {\n    this.isCursorVisible = true;\n    if (this._coreBrowserService.isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = this._coreBrowserService.window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = this._coreBrowserService.window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation();\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\n\ninterface IBlockVector {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\n  // Block elements (0x2580-0x2590)\n  '▀': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\n  '▁': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\n  '▂': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\n  '▃': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\n  '▄': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\n  '▅': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\n  '▆': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\n  '▇': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\n  '█': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\n  '▉': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\n  '▊': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\n  '▋': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\n  '▌': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\n  '▍': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\n  '▎': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\n  '▏': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\n  '▐': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\n\n  // Block elements (0x2594-0x2595)\n  '▔': [{ x: 0, y: 0, w: 8, h: 1 }], // UPPER ONE EIGHTH BLOCK\n  '▕': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\n\n  // Terminal graphic characters (0x2596-0x259F)\n  '▖': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\n  '▗': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\n  '▘': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\n  '▙': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\n  '▚': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\n  '▛': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 4, y: 0, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\n  '▜': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\n  '▝': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\n  '▞': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\n  '▟': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\n\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\n\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\n\n  // LEFT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // LEFT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // UPPER AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n\n  // UPPER ONE QUARTER BLOCK\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\n  // UPPER THREE EIGHTHS BLOCK\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\n  // UPPER FIVE EIGHTHS BLOCK\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\n  // UPPER THREE QUARTERS BLOCK\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\n  // UPPER SEVEN EIGHTHS BLOCK\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\n\n  // RIGHT ONE QUARTER BLOCK\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\n  // RIGHT THREE EIGHTHS B0OCK\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\n  // RIGHT FIVE EIGHTHS BL0CK\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\n  // RIGHT THREE QUARTERS 0LOCK\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\n  // RIGHT SEVEN EIGHTHS B0OCK\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\n\n  // CHECKER BOARD FILL\n  '\\u{1FB95}': [\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\n  ],\n  // INVERSE CHECKER BOARD FILL\n  '\\u{1FB96}': [\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\n  ],\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\n};\n\ntype PatternDefinition = number[][];\n\n/**\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\n * pixel values to be filled (1) or not filled (0).\n */\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\n  // Shade characters (0x2591-0x2593)\n  '░': [ // LIGHT SHADE (25%)\n    [1, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0]\n  ],\n  '▒': [ // MEDIUM SHADE (50%)\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [0, 0]\n  ],\n  '▓': [ // DARK SHADE (75%)\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, 1]\n  ]\n};\n\nconst enum Shapes {\n  /** │ */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\n  /** ─ */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\n\n  /** └ */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\n  /** ┘ */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\n  /** ┐ */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\n  /** ┌ */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\n\n  /** ╵ */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\n  /** ╴ */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\n  /** ╶ */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\n  /** ╷ */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\n\n  /** ┴ */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\n  /** ┤ */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\n  /** ├ */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\n  /** ┬ */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\n\n  /** ┼ */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\n\n  /** ╌ */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\n  /** ┄ */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\n  /** ┉ */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\n  /** ╎ */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\n  /** ┆ */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\n  /** ┊ */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\n}\n\nconst enum Style {\n  NORMAL = 1,\n  BOLD = 3\n}\n\n/**\n * @param xp The percentage of 15% of the x axis.\n * @param yp The percentage of 15% of the x axis on the y axis.\n */\ntype DrawFunctionDefinition = (xp: number, yp: number) => string;\n\n/**\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\n * svg d attribute).\n */\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | DrawFunctionDefinition } | undefined } = {\n  // Uniform normal and bold\n  '─': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\n  '━': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\n  '│': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\n  '┃': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\n  '┌': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\n  '┏': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\n  '┐': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\n  '┓': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\n  '└': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\n  '┗': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\n  '┘': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\n  '┛': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\n  '├': { [Style.NORMAL]: Shapes.T_RIGHT },\n  '┣': { [Style.BOLD]:   Shapes.T_RIGHT },\n  '┤': { [Style.NORMAL]: Shapes.T_LEFT },\n  '┫': { [Style.BOLD]:   Shapes.T_LEFT },\n  '┬': { [Style.NORMAL]: Shapes.T_BOTTOM },\n  '┳': { [Style.BOLD]:   Shapes.T_BOTTOM },\n  '┴': { [Style.NORMAL]: Shapes.T_TOP },\n  '┻': { [Style.BOLD]:   Shapes.T_TOP },\n  '┼': { [Style.NORMAL]: Shapes.CROSS },\n  '╋': { [Style.BOLD]:   Shapes.CROSS },\n  '╴': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\n  '╸': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\n  '╵': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\n  '╹': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\n  '╶': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\n  '╺': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\n  '╷': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\n  '╻': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\n\n  // Double border\n  '═': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '║': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╒': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╓': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╔': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╕': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╖': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\n  '╗': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\n  '╘': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\n  '╙': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╚': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\n  '╛': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\n  '╜': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\n  '╝': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\n  '╞': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╟': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\n  '╠': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╡': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╢': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╣': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\n  '╤': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\n  '╥': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╦': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╧': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╨': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╩': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╪': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╫': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╬': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n\n  // Diagonal\n  '╱': { [Style.NORMAL]: 'M1,0 L0,1' },\n  '╲': { [Style.NORMAL]: 'M0,0 L1,1' },\n  '╳': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\n\n  // Mixed weight\n  '╼': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '╽': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╾': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '╿': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┍': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┎': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┑': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┒': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┕': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┖': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┙': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┚': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┝': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┞': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┟': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┠': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┡': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┢': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┥': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┦': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┧': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┨': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┩': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┪': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┭': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┮': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┯': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┰': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┱': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┲': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┵': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┶': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┷': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┸': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┹': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┺': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┽': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┾': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┿': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '╀': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '╁': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╂': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '╃': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '╄': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '╅': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '╆': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '╇': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\n  '╈': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\n  '╉': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\n  '╊': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\n\n  // Dashed\n  '╌': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\n  '╍': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\n  '┄': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\n  '┅': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\n  '┈': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\n  '┉': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\n  '╎': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\n  '╏': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\n  '┆': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\n  '┇': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\n  '┊': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\n  '┋': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\n\n  // Curved\n  '╭': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,1,.5` },\n  '╮': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,0,.5` },\n  '╯': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,0,.5` },\n  '╰': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,1,.5` }\n};\n\ninterface IVectorShape {\n  d: string;\n  type: VectorType;\n  leftPadding?: number;\n  rightPadding?: number;\n}\n\nconst enum VectorType {\n  FILL,\n  STROKE\n}\n\n/**\n * This contains the definitions of the primarily used box drawing characters as vector shapes. The\n * reason these characters are defined specially is to avoid common problems if a user's font has\n * not been patched with powerline characters and also to get pixel perfect rendering as rendering\n * issues can occur around AA/SPAA.\n *\n * The line variants draw beyond the cell and get clipped to ensure the end of the line is not\n * visible.\n *\n * Original symbols defined in https://github.com/powerline/fontpatcher\n */\nexport const powerlineDefinitions: { [index: string]: IVectorShape } = {\n  // Right triangle solid\n  '\\u{E0B0}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.FILL, rightPadding: 2 },\n  // Right triangle line\n  '\\u{E0B1}': { d: 'M-1,-.5 L1,.5 L-1,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Left triangle solid\n  '\\u{E0B2}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.FILL, leftPadding: 2 },\n  // Left triangle line\n  '\\u{E0B3}': { d: 'M2,-.5 L0,.5 L2,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Right semi-circle solid\n  '\\u{E0B4}': { d: 'M0,0 L0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.FILL, rightPadding: 1 },\n  // Right semi-circle line\n  '\\u{E0B5}': { d: 'M.2,1 C.422,1,.8,.826,.78,.5 C.8,.174,0.422,0,.2,0', type: VectorType.STROKE, rightPadding: 1 },\n  // Left semi-circle solid\n  '\\u{E0B6}': { d: 'M1,0 L1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.FILL, leftPadding: 1 },\n  // Left semi-circle line\n  '\\u{E0B7}': { d: 'M.8,1 C0.578,1,0.2,.826,.22,.5 C0.2,0.174,0.578,0,0.8,0', type: VectorType.STROKE, leftPadding: 1 },\n  // Lower left triangle\n  '\\u{E0B8}': { d: 'M-.5,-.5 L1.5,1.5 L-.5,1.5', type: VectorType.FILL },\n  // Backslash separator\n  '\\u{E0B9}': { d: 'M-.5,-.5 L1.5,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Lower right triangle\n  '\\u{E0BA}': { d: 'M1.5,-.5 L-.5,1.5 L1.5,1.5', type: VectorType.FILL },\n  // Upper left triangle\n  '\\u{E0BC}': { d: 'M1.5,-.5 L-.5,1.5 L-.5,-.5', type: VectorType.FILL },\n  // Forward slash separator\n  '\\u{E0BD}': { d: 'M1.5,-.5 L-.5,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Upper right triangle\n  '\\u{E0BE}': { d: 'M-.5,-.5 L1.5,1.5 L1.5,-.5', type: VectorType.FILL }\n};\n// Forward slash separator redundant\npowerlineDefinitions['\\u{E0BB}'] = powerlineDefinitions['\\u{E0BD}'];\n// Backslash separator redundant\npowerlineDefinitions['\\u{E0BF}'] = powerlineDefinitions['\\u{E0B9}'];\n\n/**\n * Try drawing a custom block element or box drawing character, returning whether it was\n * successfully drawn.\n */\nexport function tryDrawCustomChar(\n  ctx: CanvasRenderingContext2D,\n  c: string,\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  fontSize: number,\n  devicePixelRatio: number\n): boolean {\n  const blockElementDefinition = blockElementDefinitions[c];\n  if (blockElementDefinition) {\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n    return true;\n  }\n\n  const patternDefinition = patternCharacterDefinitions[c];\n  if (patternDefinition) {\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n    return true;\n  }\n\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\n  if (boxDrawingDefinition) {\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight, devicePixelRatio);\n    return true;\n  }\n\n  const powerlineDefinition = powerlineDefinitions[c];\n  if (powerlineDefinition) {\n    drawPowerlineChar(ctx, powerlineDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight, fontSize, devicePixelRatio);\n    return true;\n  }\n\n  return false;\n}\n\nfunction drawBlockElementChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IBlockVector[],\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number\n): void {\n  for (let i = 0; i < charDefinition.length; i++) {\n    const box = charDefinition[i];\n    const xEighth = deviceCellWidth / 8;\n    const yEighth = deviceCellHeight / 8;\n    ctx.fillRect(\n      xOffset + box.x * xEighth,\n      yOffset + box.y * yEighth,\n      box.w * xEighth,\n      box.h * yEighth\n    );\n  }\n}\n\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\n\nfunction drawPatternChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: number[][],\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number\n): void {\n  let patternSet = cachedPatterns.get(charDefinition);\n  if (!patternSet) {\n    patternSet = new Map();\n    cachedPatterns.set(charDefinition, patternSet);\n  }\n  const fillStyle = ctx.fillStyle;\n  if (typeof fillStyle !== 'string') {\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\n  }\n  let pattern = patternSet.get(fillStyle);\n  if (!pattern) {\n    const width = charDefinition[0].length;\n    const height = charDefinition.length;\n    const tmpCanvas = ctx.canvas.ownerDocument.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\n    const imageData = new ImageData(width, height);\n\n    // Extract rgba from fillStyle\n    let r: number;\n    let g: number;\n    let b: number;\n    let a: number;\n    if (fillStyle.startsWith('#')) {\n      r = parseInt(fillStyle.slice(1, 3), 16);\n      g = parseInt(fillStyle.slice(3, 5), 16);\n      b = parseInt(fillStyle.slice(5, 7), 16);\n      a = fillStyle.length > 7 && parseInt(fillStyle.slice(7, 9), 16) || 1;\n    } else if (fillStyle.startsWith('rgba')) {\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\n    } else {\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        imageData.data[(y * width + x) * 4    ] = r;\n        imageData.data[(y * width + x) * 4 + 1] = g;\n        imageData.data[(y * width + x) * 4 + 2] = b;\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\n      }\n    }\n    tmpCtx.putImageData(imageData, 0, 0);\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\n    patternSet.set(fillStyle, pattern);\n  }\n  ctx.fillStyle = pattern;\n  ctx.fillRect(xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n}\n\n/**\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\n * canvas draw calls.\n *\n * Box styles:       ┎┰┒┍┯┑╓╥╖╒╤╕ ┏┳┓┌┲┓┌┬┐┏┱┐\n * ┌─┬─┐ ┏━┳━┓ ╔═╦═╗ ┠╂┨┝┿┥╟╫╢╞╪╡ ┡╇┩├╊┫┢╈┪┣╉┤\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┖┸┚┕┷┙╙╨╜╘╧╛ └┴┘└┺┛┗┻┛┗┹┘\n * ├─┼─┤ ┣━╋━┫ ╠═╬═╣ ┏┱┐┌┲┓┌┬┐┌┬┐ ┏┳┓┌┮┓┌┬┐┏┭┐\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┡╃┤├╄┩├╆┪┢╅┤ ┞╀┦├┾┫┟╁┧┣┽┤\n * └─┴─┘ ┗━┻━┛ ╚═╩═╝ └┴┘└┴┘└┺┛┗┹┘ └┴┘└┶┛┗┻┛┗┵┘\n *\n * Other:\n * ╭─╮ ╲ ╱ ╷╻╎╏┆┇┊┋ ╺╾╴ ╌╌╌ ┄┄┄ ┈┈┈\n * │ │  ╳  ╽╿╎╏┆┇┊┋ ╶╼╸ ╍╍╍ ┅┅┅ ┉┉┉\n * ╰─╯ ╱ ╲ ╹╵╎╏┆┇┊┋\n *\n * All box drawing characters:\n * ─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏\n * ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟\n * ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯\n * ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿\n * ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏\n * ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟\n * ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ╭ ╮ ╯\n * ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿\n *\n * ---\n *\n * Box drawing alignment tests:                                          █\n *                                                                       ▉\n *   ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐    ▊ ╱╲╱╲╳╳╳\n *   ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥    ▋ ╲╱╲╱╳╳╳\n *   ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘    ▌ ╱╲╱╲╳╳╳\n *   ╠╡ ╳ ╞╣  ├╢   ╟┤  ├┼─┼─┼┤  ├╫─╂─╫┤  ┣┿╾┼╼┿┫  ┕┛┖┚     ┌┄┄┐ ╎ ┏┅┅┓ ┋ ▍ ╲╱╲╱╳╳╳\n *   ║│╱ ╲│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╽ │┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▎\n *   ║└─╥─┘║  │╚═╤═╝│  │╘═╪═╛│  │╙─╀─╜│  ┃└─╂─┘┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▏\n *   ╚══╩══╝  └──┴──┘  ╰──┴──╯  ╰──┴──╯  ┗━━┻━━┛           └╌╌┘ ╎ ┗╍╍┛ ┋  ▁▂▃▄▅▆▇█\n *\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\n */\nfunction drawBoxDrawingChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  devicePixelRatio: number\n): void {\n  ctx.strokeStyle = ctx.fillStyle;\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\n    ctx.beginPath();\n    ctx.lineWidth = devicePixelRatio * Number.parseInt(fontWeight);\n    let actualInstructions: string;\n    if (typeof instructions === 'function') {\n      const xp = .15;\n      const yp = .15 / deviceCellHeight * deviceCellWidth;\n      actualInstructions = instructions(xp, yp);\n    } else {\n      actualInstructions = instructions;\n    }\n    for (const instruction of actualInstructions.split(' ')) {\n      const type = instruction[0];\n      const f = svgToCanvasInstructionMap[type];\n      if (!f) {\n        console.error(`Could not find drawing instructions for \"${type}\"`);\n        continue;\n      }\n      const args: string[] = instruction.substring(1).split(',');\n      if (!args[0] || !args[1]) {\n        continue;\n      }\n      f(ctx, translateArgs(args, deviceCellWidth, deviceCellHeight, xOffset, yOffset, true, devicePixelRatio));\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n\nfunction drawPowerlineChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IVectorShape,\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  fontSize: number,\n  devicePixelRatio: number\n): void {\n  // Clip the cell to make sure drawing doesn't occur beyond bounds\n  const clipRegion = new Path2D();\n  clipRegion.rect(xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n  ctx.clip(clipRegion);\n\n  ctx.beginPath();\n  // Scale the stroke with DPR and font size\n  const cssLineWidth = fontSize / 12;\n  ctx.lineWidth = devicePixelRatio * cssLineWidth;\n  for (const instruction of charDefinition.d.split(' ')) {\n    const type = instruction[0];\n    const f = svgToCanvasInstructionMap[type];\n    if (!f) {\n      console.error(`Could not find drawing instructions for \"${type}\"`);\n      continue;\n    }\n    const args: string[] = instruction.substring(1).split(',');\n    if (!args[0] || !args[1]) {\n      continue;\n    }\n    f(ctx, translateArgs(\n      args,\n      deviceCellWidth,\n      deviceCellHeight,\n      xOffset,\n      yOffset,\n      false,\n      devicePixelRatio,\n      (charDefinition.leftPadding ?? 0) * (cssLineWidth / 2),\n      (charDefinition.rightPadding ?? 0) * (cssLineWidth / 2)\n    ));\n  }\n  if (charDefinition.type === VectorType.STROKE) {\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.stroke();\n  } else {\n    ctx.fill();\n  }\n  ctx.closePath();\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\n};\n\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number, doClamp: boolean, devicePixelRatio: number, leftPadding: number = 0, rightPadding: number = 0): number[] {\n  const result = args.map(e => parseFloat(e) || parseInt(e));\n\n  if (result.length < 2) {\n    throw new Error('Too few arguments for instruction');\n  }\n\n  for (let x = 0; x < result.length; x += 2) {\n    // Translate from 0-1 to 0-cellWidth\n    result[x] *= cellWidth - (leftPadding * devicePixelRatio) - (rightPadding * devicePixelRatio);\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[x] !== 0) {\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\n    }\n    // Apply the cell's offset (ie. x*cellWidth)\n    result[x] += xOffset + (leftPadding * devicePixelRatio);\n  }\n\n  for (let y = 1; y < result.length; y += 2) {\n    // Translate from 0-1 to 0-cellHeight\n    result[y] *= cellHeight;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[y] !== 0) {\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\n    }\n    // Apply the cell's offset (ie. x*cellHeight)\n    result[y] += yOffset;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\n\nexport function observeDevicePixelDimensions(element: HTMLElement, parentWindow: Window & typeof globalThis, callback: (deviceWidth: number, deviceHeight: number) => void): IDisposable {\n  // Observe any resizes to the element and extract the actual pixel size of the element if the\n  // devicePixelContentBoxSize API is supported. This allows correcting rounding errors when\n  // converting between CSS pixels and device pixels which causes blurry rendering when device\n  // pixel ratio is not a round number.\n  let observer: ResizeObserver | undefined = new parentWindow.ResizeObserver((entries) => {\n    const entry = entries.find((entry) => entry.target === element);\n    if (!entry) {\n      return;\n    }\n\n    // Disconnect if devicePixelContentBoxSize isn't supported by the browser\n    if (!('devicePixelContentBoxSize' in entry)) {\n      observer?.disconnect();\n      observer = undefined;\n      return;\n    }\n\n    // Fire the callback, ignore events where the dimensions are 0x0 as the canvas is likely hidden\n    const width = entry.devicePixelContentBoxSize[0].inlineSize;\n    const height = entry.devicePixelContentBoxSize[0].blockSize;\n    if (width > 0 && height > 0) {\n      callback(width, height);\n    }\n  });\n  try {\n    observer.observe(element, { box: ['device-pixel-content-box'] } as any);\n  } catch {\n    observer.disconnect();\n    observer = undefined;\n  }\n  return toDisposable(() => observer?.disconnect());\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDimensions, IRenderDimensions } from 'browser/renderer/shared/Types';\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isNerdFontGlyph(codepoint: number): boolean {\n  return 0xE000 <= codepoint && codepoint <= 0xF8FF;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function isEmoji(codepoint: number): boolean {\n  return (\n    codepoint >= 0x1F600 && codepoint <= 0x1F64F || // Emoticons\n    codepoint >= 0x1F300 && codepoint <= 0x1F5FF || // Misc Symbols and Pictographs\n    codepoint >= 0x1F680 && codepoint <= 0x1F6FF || // Transport and Map\n    codepoint >= 0x2600  && codepoint <= 0x26FF  || // Misc symbols\n    codepoint >= 0x2700  && codepoint <= 0x27BF  || // Dingbats\n    codepoint >= 0xFE00  && codepoint <= 0xFE0F  || // Variation Selectors\n    codepoint >= 0x1F900 && codepoint <= 0x1F9FF || // Supplemental Symbols and Pictographs\n    codepoint >= 0x1F1E6 && codepoint <= 0x1F1FF\n  );\n}\n\nexport function allowRescaling(codepoint: number | undefined, width: number, glyphSizeX: number, deviceCellWidth: number): boolean {\n  return (\n    // Is single cell width\n    width === 1 &&\n    // Glyph exceeds cell bounds, add 50% to avoid hurting readability by rescaling glyphs that\n    // barely overlap\n    glyphSizeX > Math.ceil(deviceCellWidth * 1.5) &&\n    // Never rescale ascii\n    codepoint !== undefined && codepoint > 0xFF &&\n    // Never rescale emoji\n    !isEmoji(codepoint) &&\n    // Never rescale powerline or nerd fonts\n    !isPowerlineGlyph(codepoint) && !isNerdFontGlyph(codepoint)\n  );\n}\n\nexport function treatGlyphAsBackgroundColor(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n\nexport function createRenderDimensions(): IRenderDimensions {\n  return {\n    css: {\n      canvas: createDimension(),\n      cell: createDimension()\n    },\n    device: {\n      canvas: createDimension(),\n      cell: createDimension(),\n      char: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      }\n    }\n  };\n}\n\nfunction createDimension(): IDimensions {\n  return {\n    width: 0,\n    height: 0\n  };\n}\n\nexport function computeNextVariantOffset(cellWidth: number, lineWidth: number, currentOffset: number = 0): number {\n  return (cellWidth - (Math.round(lineWidth) * 2 - currentOffset)) % (Math.round(lineWidth) * 2);\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal } from 'browser/Types';\nimport { ISelectionRenderModel } from 'browser/renderer/shared/Types';\nimport { Terminal } from '@xterm/xterm';\n\nclass SelectionRenderModel implements ISelectionRenderModel {\n  public hasSelection!: boolean;\n  public columnSelectMode!: boolean;\n  public viewportStartRow!: number;\n  public viewportEndRow!: number;\n  public viewportCappedStartRow!: number;\n  public viewportCappedEndRow!: number;\n  public startCol!: number;\n  public endCol!: number;\n  public selectionStart: [number, number] | undefined;\n  public selectionEnd: [number, number] | undefined;\n\n  constructor() {\n    this.clear();\n  }\n\n  public clear(): void {\n    this.hasSelection = false;\n    this.columnSelectMode = false;\n    this.viewportStartRow = 0;\n    this.viewportEndRow = 0;\n    this.viewportCappedStartRow = 0;\n    this.viewportCappedEndRow = 0;\n    this.startCol = 0;\n    this.endCol = 0;\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n  }\n\n  public update(terminal: ITerminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this.selectionStart = start;\n    this.selectionEnd = end;\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this.clear();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportY = terminal.buffers.active.ydisp;\n    const viewportStartRow = start[1] - viewportY;\n    const viewportEndRow = end[1] - viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this.clear();\n      return;\n    }\n\n    this.hasSelection = true;\n    this.columnSelectMode = columnSelectMode;\n    this.viewportStartRow = viewportStartRow;\n    this.viewportEndRow = viewportEndRow;\n    this.viewportCappedStartRow = viewportCappedStartRow;\n    this.viewportCappedEndRow = viewportCappedEndRow;\n    this.startCol = start[0];\n    this.endCol = end[0];\n  }\n\n  public isCellSelected(terminal: Terminal, x: number, y: number): boolean {\n    if (!this.hasSelection) {\n      return false;\n    }\n    y -= terminal.buffer.active.viewportY;\n    if (this.columnSelectMode) {\n      if (this.startCol <= this.endCol) {\n        return x >= this.startCol && y >= this.viewportCappedStartRow &&\n          x < this.endCol && y <= this.viewportCappedEndRow;\n      }\n      return x < this.startCol && y >= this.viewportCappedStartRow &&\n        x >= this.endCol && y <= this.viewportCappedEndRow;\n    }\n    return (y > this.viewportStartRow && y < this.viewportEndRow) ||\n      (this.viewportStartRow === this.viewportEndRow && y === this.viewportStartRow && x >= this.startCol && x < this.endCol) ||\n      (this.viewportStartRow < this.viewportEndRow && y === this.viewportEndRow && x < this.endCol) ||\n      (this.viewportStartRow < this.viewportEndRow && y === this.viewportStartRow && x >= this.startCol);\n  }\n}\n\nexport function createSelectionRenderModel(): ISelectionRenderModel {\n  return new SelectionRenderModel();\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorContrastCache } from 'browser/Types';\nimport { DIM_OPACITY, TEXT_BASELINE } from 'browser/renderer/shared/Constants';\nimport { tryDrawCustomChar } from 'browser/renderer/shared/CustomGlyphs';\nimport { computeNextVariantOffset, treatGlyphAsBackgroundColor, isPowerlineGlyph, isRestrictedPowerlineGlyph, throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { IBoundingBox, ICharAtlasConfig, IRasterizedGlyph, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { NULL_COLOR, channels, color, rgba } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { FourKeyMap } from 'common/MultiKeyMap';\nimport { IdleTaskQueue } from 'common/TaskQueue';\nimport { IColor } from 'common/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { Attributes, DEFAULT_COLOR, DEFAULT_EXT, UnderlineStyle } from 'common/buffer/Constants';\nimport { IUnicodeService } from 'common/services/Services';\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  texturePage: 0,\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  offset: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\nconst enum Constants {\n  /**\n   * The amount of pixel padding to allow in each row. Setting this to zero would make the atlas\n   * page pack as tightly as possible, but more pages would end up being created as a result.\n   */\n  ROW_PIXEL_THRESHOLD = 2,\n  /**\n   * The maximum texture size regardless of what the actual hardware maximum turns out to be. This\n   * is enforced to ensure uploading the texture still finishes in a reasonable amount of time. A\n   * 4096 squared image takes up 16MB of GPU memory.\n   */\n  FORCED_MAX_TEXTURE_SIZE = 4096\n}\n\ninterface ICharAtlasActiveRow {\n  x: number;\n  y: number;\n  height: number;\n}\n\n// Work variables to avoid garbage collection\nlet $glyph = undefined;\n\nexport class TextureAtlas implements ITextureAtlas {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: FourKeyMap<number, number, number, number, IRasterizedGlyph> = new FourKeyMap();\n  private _cacheMapCombined: FourKeyMap<string, number, number, number, IRasterizedGlyph> = new FourKeyMap();\n\n  // The texture that the atlas is drawn to\n  private _pages: AtlasPage[] = [];\n  public get pages(): { canvas: HTMLCanvasElement, version: number }[] { return this._pages; }\n\n  // The set of atlas pages that can be written to\n  private _activePages: AtlasPage[] = [];\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  private _textureSize: number = 512;\n\n  public static maxAtlasPages: number | undefined;\n  public static maxTextureSize: number | undefined;\n\n  private readonly _onAddTextureAtlasCanvas = new EventEmitter<HTMLCanvasElement>();\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\n  private readonly _onRemoveTextureAtlasCanvas = new EventEmitter<HTMLCanvasElement>();\n  public readonly onRemoveTextureAtlasCanvas = this._onRemoveTextureAtlasCanvas.event;\n\n  constructor(\n    private readonly _document: Document,\n    private readonly _config: ICharAtlasConfig,\n    private readonly _unicodeService: IUnicodeService\n  ) {\n    this._createNewPage();\n    this._tmpCanvas = createCanvas(\n      _document,\n      this._config.deviceCellWidth * 4 + TMP_CANVAS_GLYPH_PADDING * 2,\n      this._config.deviceCellHeight + TMP_CANVAS_GLYPH_PADDING * 2\n    );\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', {\n      alpha: this._config.allowTransparency,\n      willReadFrequently: true\n    }));\n  }\n\n  public dispose(): void {\n    for (const page of this.pages) {\n      page.canvas.remove();\n    }\n    this._onAddTextureAtlasCanvas.dispose();\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  private _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126, this is not urgent and done in idle callbacks\n    const queue = new IdleTaskQueue();\n    for (let i = 33; i < 126; i++) {\n      queue.enqueue(() => {\n        if (!this._cacheMap.get(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT)) {\n          const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT);\n          this._cacheMap.set(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT, rasterizedGlyph);\n        }\n      });\n    }\n  }\n\n  private _requestClearModel = false;\n  public beginFrame(): boolean {\n    return this._requestClearModel;\n  }\n\n  public clearTexture(): void {\n    if (this._pages[0].currentRow.x === 0 && this._pages[0].currentRow.y === 0) {\n      return;\n    }\n    for (const page of this._pages) {\n      page.clear();\n    }\n    this._cacheMap.clear();\n    this._cacheMapCombined.clear();\n    this._didWarmUp = false;\n  }\n\n  private _createNewPage(): AtlasPage {\n    // Try merge the set of the 4 most used pages of the largest size. This is is deferred to a\n    // microtask to ensure it does not interrupt textures that will be rendered in the current\n    // animation frame which would result in blank rendered areas. This is actually not that\n    // expensive relative to drawing the glyphs, so there is no need to wait for an idle callback.\n    if (TextureAtlas.maxAtlasPages && this._pages.length >= Math.max(4, TextureAtlas.maxAtlasPages)) {\n      // Find the set of the largest 4 images, below the maximum size, with the highest\n      // percentages used\n      const pagesBySize = this._pages.filter(e => {\n        return e.canvas.width * 2 <= (TextureAtlas.maxTextureSize || Constants.FORCED_MAX_TEXTURE_SIZE);\n      }).sort((a, b) => {\n        if (b.canvas.width !== a.canvas.width) {\n          return b.canvas.width - a.canvas.width;\n        }\n        return b.percentageUsed - a.percentageUsed;\n      });\n      let sameSizeI = -1;\n      let size = 0;\n      for (let i = 0; i < pagesBySize.length; i++) {\n        if (pagesBySize[i].canvas.width !== size) {\n          sameSizeI = i;\n          size = pagesBySize[i].canvas.width;\n        } else if (i - sameSizeI === 3) {\n          break;\n        }\n      }\n\n      // Gather details of the merge\n      const mergingPages = pagesBySize.slice(sameSizeI, sameSizeI + 4);\n      const sortedMergingPagesIndexes = mergingPages.map(e => e.glyphs[0].texturePage).sort((a, b) => a > b ? 1 : -1);\n      const mergedPageIndex = this.pages.length - mergingPages.length;\n\n      // Merge into the new page\n      const mergedPage = this._mergePages(mergingPages, mergedPageIndex);\n      mergedPage.version++;\n\n      // Delete the pages, shifting glyph texture pages as needed\n      for (let i = sortedMergingPagesIndexes.length - 1; i >= 0; i--) {\n        this._deletePage(sortedMergingPagesIndexes[i]);\n      }\n\n      // Add the new merged page to the end\n      this.pages.push(mergedPage);\n\n      // Request the model to be cleared to refresh all texture pages.\n      this._requestClearModel = true;\n      this._onAddTextureAtlasCanvas.fire(mergedPage.canvas);\n    }\n\n    // All new atlas pages are created small as they are highly dynamic\n    const newPage = new AtlasPage(this._document, this._textureSize);\n    this._pages.push(newPage);\n    this._activePages.push(newPage);\n    this._onAddTextureAtlasCanvas.fire(newPage.canvas);\n    return newPage;\n  }\n\n  private _mergePages(mergingPages: AtlasPage[], mergedPageIndex: number): AtlasPage {\n    const mergedSize = mergingPages[0].canvas.width * 2;\n    const mergedPage = new AtlasPage(this._document, mergedSize, mergingPages);\n    for (const [i, p] of mergingPages.entries()) {\n      const xOffset = i * p.canvas.width % mergedSize;\n      const yOffset = Math.floor(i / 2) * p.canvas.height;\n      mergedPage.ctx.drawImage(p.canvas, xOffset, yOffset);\n      for (const g of p.glyphs) {\n        g.texturePage = mergedPageIndex;\n        g.sizeClipSpace.x = g.size.x / mergedSize;\n        g.sizeClipSpace.y = g.size.y / mergedSize;\n        g.texturePosition.x += xOffset;\n        g.texturePosition.y += yOffset;\n        g.texturePositionClipSpace.x = g.texturePosition.x / mergedSize;\n        g.texturePositionClipSpace.y = g.texturePosition.y / mergedSize;\n      }\n\n      this._onRemoveTextureAtlasCanvas.fire(p.canvas);\n\n      // Remove the merging page from active pages if it was there\n      const index = this._activePages.indexOf(p);\n      if (index !== -1) {\n        this._activePages.splice(index, 1);\n      }\n    }\n    return mergedPage;\n  }\n\n  private _deletePage(pageIndex: number): void {\n    this._pages.splice(pageIndex, 1);\n    for (let j = pageIndex; j < this._pages.length; j++) {\n      const adjustingPage = this._pages[j];\n      for (const g of adjustingPage.glyphs) {\n        g.texturePage--;\n      }\n      adjustingPage.version++;\n    }\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number, ext: number, restrictToCellHeight: boolean): IRasterizedGlyph {\n    return this._getFromCacheMap(this._cacheMapCombined, chars, bg, fg, ext, restrictToCellHeight);\n  }\n\n  public getRasterizedGlyph(code: number, bg: number, fg: number, ext: number, restrictToCellHeight: boolean): IRasterizedGlyph {\n    return this._getFromCacheMap(this._cacheMap, code, bg, fg, ext, restrictToCellHeight);\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  private _getFromCacheMap(\n    cacheMap: FourKeyMap<string | number, number, number, number, IRasterizedGlyph>,\n    key: string | number,\n    bg: number,\n    fg: number,\n    ext: number,\n    restrictToCellHeight: boolean = false\n  ): IRasterizedGlyph {\n    $glyph = cacheMap.get(key, bg, fg, ext);\n    if (!$glyph) {\n      $glyph = this._drawToCache(key, bg, fg, ext, restrictToCellHeight);\n      cacheMap.set(key, bg, fg, ext, $glyph);\n    }\n    return $glyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean, dim: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return NULL_COLOR;\n    }\n\n    let result: IColor;\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        result = this._getColorFromAnsiIndex(bgColor);\n        break;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        result = channels.toColor(arr[0], arr[1], arr[2]);\n        break;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          result = color.opaque(this._config.colors.foreground);\n        } else {\n          result = this._config.colors.background;\n        }\n        break;\n    }\n\n    return result;\n  }\n\n  private _getForegroundColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, dim: boolean, bold: boolean, excludeFromContrastRatioDemands: boolean): IColor {\n    const minimumContrastColor = this._getMinimumContrastColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold, dim, excludeFromContrastRatioDemands);\n    if (minimumContrastColor) {\n      return minimumContrastColor;\n    }\n\n    let result: IColor;\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        result = this._getColorFromAnsiIndex(fgColor);\n        break;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        result = channels.toColor(arr[0], arr[1], arr[2]);\n        break;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          result = this._config.colors.background;\n        } else {\n          result = this._config.colors.foreground;\n        }\n    }\n\n    // Always use an opaque color regardless of allowTransparency\n    if (this._config.allowTransparency) {\n      result = color.opaque(result);\n    }\n\n    // Apply dim to the color, opacity is fine to use for the foreground color\n    if (dim) {\n      result = color.multiplyOpacity(result, DIM_OPACITY);\n    }\n\n    return result;\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean, dim: boolean, excludeFromContrastRatioDemands: boolean): IColor | undefined {\n    if (this._config.minimumContrastRatio === 1 || excludeFromContrastRatioDemands) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const cache = this._getContrastCache(dim);\n    const adjustedColor = cache.getColor(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    // Dim cells only require half the contrast, otherwise they wouldn't be distinguishable from\n    // non-dim cells\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio / (dim ? 2 : 1));\n\n    if (!result) {\n      cache.setColor(bg, fg, null);\n      return undefined;\n    }\n\n    const color = channels.toColor(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    cache.setColor(bg, fg, color);\n\n    return color;\n  }\n\n  private _getContrastCache(dim: boolean): IColorContrastCache {\n    if (dim) {\n      return this._config.colors.halfContrastCache;\n    }\n    return this._config.colors.contrastCache;\n  }\n\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number, ext: number, restrictToCellHeight: boolean = false): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    // Uncomment for debugging\n    // console.log(`draw to cache \"${chars}\"`, bg, fg, ext);\n\n    // Allow 1 cell width per character, with a minimum of 2 (CJK), plus some padding. This is used\n    // to draw the glyph to the canvas as well as to restrict the bounding box search to ensure\n    // giant ligatures (eg. =====>) don't impact overall performance.\n    const allowedWidth = Math.min(this._config.deviceCellWidth * Math.max(chars.length, 2) + TMP_CANVAS_GLYPH_PADDING * 2, this._textureSize);\n    if (this._tmpCanvas.width < allowedWidth) {\n      this._tmpCanvas.width = allowedWidth;\n    }\n    // Include line height when drawing glyphs\n    const allowedHeight = Math.min(this._config.deviceCellHeight + TMP_CANVAS_GLYPH_PADDING * 4, this._textureSize);\n    if (this._tmpCanvas.height < allowedHeight) {\n      this._tmpCanvas.height = allowedHeight;\n    }\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n    this._workAttributeData.extended.ext = ext;\n\n    const invisible = !!this._workAttributeData.isInvisible();\n    if (invisible) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    const underline = !!this._workAttributeData.isUnderline();\n    const strikethrough = !!this._workAttributeData.isStrikethrough();\n    const overline = !!this._workAttributeData.isOverline();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse, dim);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha,\n    // regardless of transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\n\n    const powerlineGlyph = chars.length === 1 && isPowerlineGlyph(chars.charCodeAt(0));\n    const restrictedPowerlineGlyph = chars.length === 1 && isRestrictedPowerlineGlyph(chars.charCodeAt(0));\n    const foregroundColor = this._getForegroundColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, dim, bold, treatGlyphAsBackgroundColor(chars.charCodeAt(0)));\n    this._tmpCtx.fillStyle = foregroundColor.css;\n\n    // For powerline glyphs left/top padding is excluded (https://github.com/microsoft/vscode/issues/120129)\n    const padding = restrictedPowerlineGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING * 2;\n\n    // Draw custom characters if applicable\n    let customGlyph = false;\n    if (this._config.customGlyphs !== false) {\n      customGlyph = tryDrawCustomChar(this._tmpCtx, chars, padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight, this._config.fontSize, this._config.devicePixelRatio);\n    }\n\n    // Whether to clear pixels based on a threshold difference between the glyph color and the\n    // background color. This should be disabled when the glyph contains multiple colors such as\n    // underline colors to prevent important colors could get cleared.\n    let enableClearThresholdCheck = !powerlineGlyph;\n\n    let chWidth: number;\n    if (typeof codeOrChars === 'number') {\n      chWidth = this._unicodeService.wcwidth(codeOrChars);\n    } else {\n      chWidth = this._unicodeService.getStringCellWidth(codeOrChars);\n    }\n\n    // Draw underline\n    if (underline) {\n      this._tmpCtx.save();\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 15));\n      // When the line width is odd, draw at a 0.5 position\n      const yOffset = lineWidth % 2 === 1 ? 0.5 : 0;\n      this._tmpCtx.lineWidth = lineWidth;\n\n      // Underline color\n      if (this._workAttributeData.isUnderlineColorDefault()) {\n        this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      } else if (this._workAttributeData.isUnderlineColorRGB()) {\n        enableClearThresholdCheck = false;\n        this._tmpCtx.strokeStyle = `rgb(${AttributeData.toColorRGB(this._workAttributeData.getUnderlineColor()).join(',')})`;\n      } else {\n        enableClearThresholdCheck = false;\n        let fg = this._workAttributeData.getUnderlineColor();\n        if (this._config.drawBoldTextInBrightColors && this._workAttributeData.isBold() && fg < 8) {\n          fg += 8;\n        }\n        this._tmpCtx.strokeStyle = this._getColorFromAnsiIndex(fg).css;\n      }\n\n      // Underline style/stroke\n      this._tmpCtx.beginPath();\n      const xLeft = padding;\n      const yTop = Math.ceil(padding + this._config.deviceCharHeight) - yOffset - (restrictToCellHeight ? lineWidth * 2 : 0);\n      const yMid = yTop + lineWidth;\n      const yBot = yTop + lineWidth * 2;\n      let nextOffset = this._workAttributeData.getUnderlineVariantOffset();\n\n      for (let i = 0; i < chWidth; i++) {\n        this._tmpCtx.save();\n        const xChLeft = xLeft + i * this._config.deviceCellWidth;\n        const xChRight = xLeft + (i + 1) * this._config.deviceCellWidth;\n        const xChMid = xChLeft + this._config.deviceCellWidth / 2;\n        switch (this._workAttributeData.extended.underlineStyle) {\n          case UnderlineStyle.DOUBLE:\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            this._tmpCtx.moveTo(xChLeft, yBot);\n            this._tmpCtx.lineTo(xChRight, yBot);\n            break;\n          case UnderlineStyle.CURLY:\n            // Choose the bezier top and bottom based on the device pixel ratio, the curly line is\n            // made taller when the line width is  as otherwise it's not very clear otherwise.\n            const yCurlyBot = lineWidth <= 1 ? yBot : Math.ceil(padding + this._config.deviceCharHeight - lineWidth / 2) - yOffset;\n            const yCurlyTop = lineWidth <= 1 ? yTop : Math.ceil(padding + this._config.deviceCharHeight + lineWidth / 2) - yOffset;\n            // Clip the left and right edges of the underline such that it can be drawn just outside\n            // the edge of the cell to ensure a continuous stroke when there are multiple underlined\n            // glyphs adjacent to one another.\n            const clipRegion = new Path2D();\n            clipRegion.rect(xChLeft, yTop, this._config.deviceCellWidth, yBot - yTop);\n            this._tmpCtx.clip(clipRegion);\n            // Start 1/2 cell before and end 1/2 cells after to ensure a smooth curve with other\n            // cells\n            this._tmpCtx.moveTo(xChLeft - this._config.deviceCellWidth / 2, yMid);\n            this._tmpCtx.bezierCurveTo(\n              xChLeft - this._config.deviceCellWidth / 2, yCurlyTop,\n              xChLeft, yCurlyTop,\n              xChLeft, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChLeft, yCurlyBot,\n              xChMid, yCurlyBot,\n              xChMid, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChMid, yCurlyTop,\n              xChRight, yCurlyTop,\n              xChRight, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChRight, yCurlyBot,\n              xChRight + this._config.deviceCellWidth / 2, yCurlyBot,\n              xChRight + this._config.deviceCellWidth / 2, yMid\n            );\n            break;\n          case UnderlineStyle.DOTTED:\n            const offsetWidth = nextOffset === 0 ? 0 :\n              (nextOffset >= lineWidth ? lineWidth * 2 - nextOffset : lineWidth - nextOffset);\n              // a line and a gap.\n            const isLineStart = nextOffset >= lineWidth ? false : true;\n            if (isLineStart === false || offsetWidth === 0) {\n              this._tmpCtx.setLineDash([Math.round(lineWidth), Math.round(lineWidth)]);\n              this._tmpCtx.moveTo(xChLeft + offsetWidth, yTop);\n              this._tmpCtx.lineTo(xChRight, yTop);\n            } else {\n              this._tmpCtx.setLineDash([Math.round(lineWidth), Math.round(lineWidth)]);\n              this._tmpCtx.moveTo(xChLeft, yTop);\n              this._tmpCtx.lineTo(xChLeft + offsetWidth, yTop);\n              this._tmpCtx.moveTo(xChLeft + offsetWidth + lineWidth, yTop);\n              this._tmpCtx.lineTo(xChRight, yTop);\n            }\n            nextOffset = computeNextVariantOffset(xChRight - xChLeft, lineWidth, nextOffset);\n            break;\n          case UnderlineStyle.DASHED:\n            const lineRatio = 0.6;\n            const gapRatio = 0.3;\n            // End line ratio is approximately equal to 0.1\n            const xChWidth = xChRight - xChLeft;\n            const line = Math.floor(lineRatio * xChWidth);\n            const gap = Math.floor(gapRatio * xChWidth);\n            const end = xChWidth - line - gap;\n            this._tmpCtx.setLineDash([line, gap, end]);\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n          case UnderlineStyle.SINGLE:\n          default:\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n        }\n        this._tmpCtx.stroke();\n        this._tmpCtx.restore();\n      }\n      this._tmpCtx.restore();\n\n      // Draw stroke in the background color for non custom characters in order to give an outline\n      // between the text and the underline. Only do this when font size is >= 12 as the underline\n      // looks odd when the font size is too small\n      if (!customGlyph && this._config.fontSize >= 12) {\n        // This only works when transparency is disabled because it's not clear how to clear stroked\n        // text\n        if (!this._config.allowTransparency && chars !== ' ') {\n          // Measure the text, only draw the stroke if there is a descent beyond an alphabetic text\n          // baseline\n          this._tmpCtx.save();\n          this._tmpCtx.textBaseline = 'alphabetic';\n          const metrics = this._tmpCtx.measureText(chars);\n          this._tmpCtx.restore();\n          if ('actualBoundingBoxDescent' in metrics && metrics.actualBoundingBoxDescent > 0) {\n            // This translates to 1/2 the line width in either direction\n            this._tmpCtx.save();\n            // Clip the region to only draw in valid pixels near the underline to avoid a slight\n            // outline around the whole glyph, as well as additional pixels in the glyph at the top\n            // which would increase GPU memory demands\n            const clipRegion = new Path2D();\n            clipRegion.rect(xLeft, yTop - Math.ceil(lineWidth / 2), this._config.deviceCellWidth * chWidth, yBot - yTop + Math.ceil(lineWidth / 2));\n            this._tmpCtx.clip(clipRegion);\n            this._tmpCtx.lineWidth = this._config.devicePixelRatio * 3;\n            this._tmpCtx.strokeStyle = backgroundColor.css;\n            this._tmpCtx.strokeText(chars, padding, padding + this._config.deviceCharHeight);\n            this._tmpCtx.restore();\n          }\n        }\n      }\n    }\n\n    // Overline\n    if (overline) {\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 15));\n      const yOffset = lineWidth % 2 === 1 ? 0.5 : 0;\n      this._tmpCtx.lineWidth = lineWidth;\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      this._tmpCtx.beginPath();\n      this._tmpCtx.moveTo(padding, padding + yOffset);\n      this._tmpCtx.lineTo(padding + this._config.deviceCharWidth * chWidth, padding + yOffset);\n      this._tmpCtx.stroke();\n    }\n\n    // Draw the character\n    if (!customGlyph) {\n      this._tmpCtx.fillText(chars, padding, padding + this._config.deviceCharHeight);\n    }\n\n    // If this character is underscore and beyond the cell bounds, shift it up until it is visible\n    // even on the bottom row, try for a maximum of 5 pixels.\n    if (chars === '_' && !this._config.allowTransparency) {\n      let isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\n      if (isBeyondCellBounds) {\n        for (let offset = 1; offset <= 5; offset++) {\n          this._tmpCtx.save();\n          this._tmpCtx.fillStyle = backgroundColor.css;\n          this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n          this._tmpCtx.restore();\n          this._tmpCtx.fillText(chars, padding, padding + this._config.deviceCharHeight - offset);\n          isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\n          if (!isBeyondCellBounds) {\n            break;\n          }\n        }\n      }\n    }\n\n    // Draw strokethrough\n    if (strikethrough) {\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 10));\n      const yOffset = this._tmpCtx.lineWidth % 2 === 1 ? 0.5 : 0; // When the width is odd, draw at 0.5 position\n      this._tmpCtx.lineWidth = lineWidth;\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      this._tmpCtx.beginPath();\n      this._tmpCtx.moveTo(padding, padding + Math.floor(this._config.deviceCharHeight / 2) - yOffset);\n      this._tmpCtx.lineTo(padding + this._config.deviceCharWidth * chWidth, padding + Math.floor(this._config.deviceCharHeight / 2) - yOffset);\n      this._tmpCtx.stroke();\n    }\n\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // Clear out the background color and determine if the glyph is empty.\n    let isEmpty: boolean;\n    if (!this._config.allowTransparency) {\n      isEmpty = clearColor(imageData, backgroundColor, foregroundColor, enableClearThresholdCheck);\n    } else {\n      isEmpty = checkCompletelyTransparent(imageData);\n    }\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox, allowedWidth, restrictedPowerlineGlyph, customGlyph, padding);\n\n    // Find the best atlas row to use\n    let activePage: AtlasPage;\n    let activeRow: ICharAtlasActiveRow;\n    while (true) {\n      // If there are no active pages (the last smallest 4 were merged), create a new one\n      if (this._activePages.length === 0) {\n        const newPage = this._createNewPage();\n        activePage = newPage;\n        activeRow = newPage.currentRow;\n        activeRow.height = rasterizedGlyph.size.y;\n        break;\n      }\n\n      // Get the best current row from all active pages\n      activePage = this._activePages[this._activePages.length - 1];\n      activeRow = activePage.currentRow;\n      for (const p of this._activePages) {\n        if (rasterizedGlyph.size.y <= p.currentRow.height) {\n          activePage = p;\n          activeRow = p.currentRow;\n        }\n      }\n\n      // TODO: This algorithm could be simplified:\n      // - Search for the page with ROW_PIXEL_THRESHOLD in mind\n      // - Keep track of current/fixed rows in a Map\n\n      // Replace the best current row with a fixed row if there is one at least as good as the\n      // current row. Search in reverse to prioritize filling in older pages.\n      for (let i = this._activePages.length - 1; i >= 0; i--) {\n        for (const row of this._activePages[i].fixedRows) {\n          if (row.height <= activeRow.height && rasterizedGlyph.size.y <= row.height) {\n            activePage = this._activePages[i];\n            activeRow = row;\n          }\n        }\n      }\n\n      // Create a new page if too much vertical space would be wasted or there is not enough room\n      // left in the page. The previous active row will become fixed in the process as it now has a\n      // fixed height\n      if (activeRow.y + rasterizedGlyph.size.y >= activePage.canvas.height || activeRow.height > rasterizedGlyph.size.y + Constants.ROW_PIXEL_THRESHOLD) {\n        // Create the new fixed height row, creating a new page if there isn't enough room on the\n        // current page\n        let wasPageAndRowFound = false;\n        if (activePage.currentRow.y + activePage.currentRow.height + rasterizedGlyph.size.y >= activePage.canvas.height) {\n          // Find the first page with room to create the new row on\n          let candidatePage: AtlasPage | undefined;\n          for (const p of this._activePages) {\n            if (p.currentRow.y + p.currentRow.height + rasterizedGlyph.size.y < p.canvas.height) {\n              candidatePage = p;\n              break;\n            }\n          }\n          if (candidatePage) {\n            activePage = candidatePage;\n          } else {\n            // Before creating a new atlas page that would trigger a page merge, check if the\n            // current active row is sufficient when ignoring the ROW_PIXEL_THRESHOLD. This will\n            // improve texture utilization by using the available space before the page is merged\n            // and becomes static.\n            if (\n              TextureAtlas.maxAtlasPages &&\n              this._pages.length >= TextureAtlas.maxAtlasPages &&\n              activeRow.y + rasterizedGlyph.size.y <= activePage.canvas.height &&\n              activeRow.height >= rasterizedGlyph.size.y &&\n              activeRow.x + rasterizedGlyph.size.x <= activePage.canvas.width\n            ) {\n              // activePage and activeRow is already valid\n              wasPageAndRowFound = true;\n            } else {\n              // Create a new page if there is no room\n              const newPage = this._createNewPage();\n              activePage = newPage;\n              activeRow = newPage.currentRow;\n              activeRow.height = rasterizedGlyph.size.y;\n              wasPageAndRowFound = true;\n            }\n          }\n        }\n        if (!wasPageAndRowFound) {\n          // Fix the current row as the new row is being added below\n          if (activePage.currentRow.height > 0) {\n            activePage.fixedRows.push(activePage.currentRow);\n          }\n          activeRow = {\n            x: 0,\n            y: activePage.currentRow.y + activePage.currentRow.height,\n            height: rasterizedGlyph.size.y\n          };\n          activePage.fixedRows.push(activeRow);\n\n          // Create the new current row below the new fixed height row\n          activePage.currentRow = {\n            x: 0,\n            y: activeRow.y + activeRow.height,\n            height: 0\n          };\n        }\n        // TODO: Remove pages from _activePages when all rows are filled\n      }\n\n      // Exit the loop if there is enough room in the row\n      if (activeRow.x + rasterizedGlyph.size.x <= activePage.canvas.width) {\n        break;\n      }\n\n      // If there is not enough room in the current row, finish it and try again\n      if (activeRow === activePage.currentRow) {\n        activeRow.x = 0;\n        activeRow.y += activeRow.height;\n        activeRow.height = 0;\n      } else {\n        activePage.fixedRows.splice(activePage.fixedRows.indexOf(activeRow), 1);\n      }\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePage = this._pages.indexOf(activePage);\n    rasterizedGlyph.texturePosition.x = activeRow.x;\n    rasterizedGlyph.texturePosition.y = activeRow.y;\n    rasterizedGlyph.texturePositionClipSpace.x = activeRow.x / activePage.canvas.width;\n    rasterizedGlyph.texturePositionClipSpace.y = activeRow.y / activePage.canvas.height;\n\n    // Fix the clipspace position as pages may be of differing size\n    rasterizedGlyph.sizeClipSpace.x /= activePage.canvas.width;\n    rasterizedGlyph.sizeClipSpace.y /= activePage.canvas.height;\n\n    // Update atlas current row, for fixed rows the glyph height will never be larger than the row\n    // height\n    activeRow.height = Math.max(activeRow.height, rasterizedGlyph.size.y);\n    activeRow.x += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    activePage.ctx.putImageData(\n      imageData,\n      rasterizedGlyph.texturePosition.x - this._workBoundingBox.left,\n      rasterizedGlyph.texturePosition.y - this._workBoundingBox.top,\n      this._workBoundingBox.left,\n      this._workBoundingBox.top,\n      rasterizedGlyph.size.x,\n      rasterizedGlyph.size.y\n    );\n    activePage.addGlyph(rasterizedGlyph);\n    activePage.version++;\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox, allowedWidth: number, restrictedGlyph: boolean, customGlyph: boolean, padding: number): IRasterizedGlyph {\n    boundingBox.top = 0;\n    const height = restrictedGlyph ? this._config.deviceCellHeight : this._tmpCanvas.height;\n    const width = restrictedGlyph ? this._config.deviceCellWidth : allowedWidth;\n    let found = false;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < padding + width; x++) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = width;\n    found = false;\n    for (let x = padding + width - 1; x >= padding; x--) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = height;\n    found = false;\n    for (let y = height - 1; y >= 0; y--) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePage: 0,\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1),\n        y: (boundingBox.bottom - boundingBox.top + 1)\n      },\n      offset: {\n        x: -boundingBox.left + padding + ((restrictedGlyph || customGlyph) ? Math.floor((this._config.deviceCellWidth - this._config.deviceCharWidth) / 2) : 0),\n        y: -boundingBox.top + padding + ((restrictedGlyph || customGlyph) ? this._config.lineHeight === 1 ? 0 : Math.round((this._config.deviceCellHeight - this._config.deviceCharHeight) / 2) : 0)\n      }\n    };\n  }\n}\n\nclass AtlasPage {\n  public readonly canvas: HTMLCanvasElement;\n  public readonly ctx: CanvasRenderingContext2D;\n\n  private _usedPixels: number = 0;\n  public get percentageUsed(): number { return this._usedPixels / (this.canvas.width * this.canvas.height); }\n\n  private readonly _glyphs: IRasterizedGlyph[] = [];\n  public get glyphs(): ReadonlyArray<IRasterizedGlyph> { return this._glyphs; }\n  public addGlyph(glyph: IRasterizedGlyph): void {\n    this._glyphs.push(glyph);\n    this._usedPixels += glyph.size.x * glyph.size.y;\n  }\n\n  /**\n   * Used to check whether the canvas of the atlas page has changed.\n   */\n  public version = 0;\n\n  // Texture atlas current positioning data. The texture packing strategy used is to fill from\n  // left-to-right and top-to-bottom. When the glyph being written is less than half of the current\n  // row's height, the following happens:\n  //\n  // - The current row becomes the fixed height row A\n  // - A new fixed height row B the exact size of the glyph is created below the current row\n  // - A new dynamic height current row is created below B\n  //\n  // This strategy does a good job preventing space being wasted for very short glyphs such as\n  // underscores, hyphens etc. or those with underlines rendered.\n  public currentRow: ICharAtlasActiveRow = {\n    x: 0,\n    y: 0,\n    height: 0\n  };\n  public readonly fixedRows: ICharAtlasActiveRow[] = [];\n\n  constructor(\n    document: Document,\n    size: number,\n    sourcePages?: AtlasPage[]\n  ) {\n    if (sourcePages) {\n      for (const p of sourcePages) {\n        this._glyphs.push(...p.glyphs);\n        this._usedPixels += p._usedPixels;\n      }\n    }\n    this.canvas = createCanvas(document, size, size);\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this.ctx = throwIfFalsy(this.canvas.getContext('2d', { alpha: true }));\n  }\n\n  public clear(): void {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.currentRow.x = 0;\n    this.currentRow.y = 0;\n    this.currentRow.height = 0;\n    this.fixedRows.length = 0;\n    this.version++;\n  }\n}\n\n/**\n * Makes a particular rgb color and colors that are nearly the same in an ImageData completely\n * transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, bg: IColor, fg: IColor, enableThresholdCheck: boolean): boolean {\n  // Get color channels\n  const r = bg.rgba >>> 24;\n  const g = bg.rgba >>> 16 & 0xFF;\n  const b = bg.rgba >>> 8 & 0xFF;\n  const fgR = fg.rgba >>> 24;\n  const fgG = fg.rgba >>> 16 & 0xFF;\n  const fgB = fg.rgba >>> 8 & 0xFF;\n\n  // Calculate a threshold that when below a color will be treated as transpart when the sum of\n  // channel value differs. This helps improve rendering when glyphs overlap with others. This\n  // threshold is calculated relative to the difference between the background and foreground to\n  // ensure important details of the glyph are always shown, even when the contrast ratio is low.\n  // The number 12 is largely arbitrary to ensure the pixels that escape the cell in the test case\n  // were covered (fg=#8ae234, bg=#c4a000).\n  const threshold = Math.floor((Math.abs(r - fgR) + Math.abs(g - fgG) + Math.abs(b - fgB)) / 12);\n\n  // Set alpha channel of relevent pixels to 0\n  let isEmpty = true;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    // Check exact match\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      // Check the threshold based difference\n      if (enableThresholdCheck &&\n          (Math.abs(imageData.data[offset] - r) +\n          Math.abs(imageData.data[offset + 1] - g) +\n          Math.abs(imageData.data[offset + 2] - b)) < threshold) {\n        imageData.data[offset + 3] = 0;\n      } else {\n        isEmpty = false;\n      }\n    }\n  }\n\n  return isEmpty;\n}\n\nfunction checkCompletelyTransparent(imageData: ImageData): boolean {\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset + 3] > 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction createCanvas(document: Document, width: number, height: number): HTMLCanvasElement {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor, IColorRGB } from 'common/Types';\n\nlet $r = 0;\nlet $g = 0;\nlet $b = 0;\nlet $a = 0;\n\nexport const NULL_COLOR: IColor = {\n  css: '#00000000',\n  rgba: 0\n};\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    $a = (fg.rgba & 0xFF) / 255;\n    if ($a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    const css = channels.toCss($r, $g, $b);\n    const rgba = channels.toRgba($r, $g, $b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return channels.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    [$r, $g, $b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss($r, $g, $b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    $a = Math.round(opacity * 0xFF);\n    [$r, $g, $b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss($r, $g, $b, $a),\n      rgba: channels.toRgba($r, $g, $b, $a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    $a = color.rgba & 0xFF;\n    return opacity(color, ($a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb',\n * '#rrggbbaa').\n */\nexport namespace css {\n  // Attempt to set get the shared canvas context\n  let $ctx: CanvasRenderingContext2D | undefined;\n  let $litmusColor: CanvasGradient | undefined;\n  try {\n    // This is guaranteed to run in the first window, so document should be correct\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    if (ctx) {\n      $ctx = ctx;\n      $ctx.globalCompositeOperation = 'copy';\n      $litmusColor = $ctx.createLinearGradient(0, 0, 1, 1);\n    }\n  }\n  catch {\n    // noop\n  }\n\n  /**\n   * Converts a css string to an IColor, this should handle all valid CSS color strings and will\n   * throw if it's invalid. The ideal format to use is `#rrggbb[aa]` as it's the fastest to parse.\n   *\n   * Only `#rgb[a]`, `#rrggbb[aa]`, `rgb()` and `rgba()` formats are supported when run in a Node\n   * environment.\n   */\n  export function toColor(css: string): IColor {\n    // Formats: #rgb[a] and #rrggbb[aa]\n    if (css.match(/#[\\da-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return channels.toColor($r, $g, $b);\n        }\n        case 5: { // #rgba\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          $a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return channels.toColor($r, $g, $b, $a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n\n    // Formats: rgb() or rgba()\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) {\n      $r = parseInt(rgbaMatch[1]);\n      $g = parseInt(rgbaMatch[2]);\n      $b = parseInt(rgbaMatch[3]);\n      $a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return channels.toColor($r, $g, $b, $a);\n    }\n\n    // Validate the context is available for canvas-based color parsing\n    if (!$ctx || !$litmusColor) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Validate the color using canvas fillStyle\n    // See https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    $ctx.fillStyle = $litmusColor;\n    $ctx.fillStyle = css;\n    if (typeof $ctx.fillStyle !== 'string') {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    $ctx.fillRect(0, 0, 1, 1);\n    [$r, $g, $b, $a] = $ctx.getImageData(0, 0, 1, 1).data;\n\n    // Validate the color is non-transparent as color hue gets lost when drawn to the canvas\n    if ($a !== 0xFF) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Extract the color from the canvas' fillStyle property which exposes the color value in rgba()\n    // format\n    // See https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n    return {\n      rgba: channels.toRgba($r, $g, $b, $a),\n      css\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  export function blend(bg: number, fg: number): number {\n    $a = (fg & 0xFF) / 0xFF;\n    if ($a === 1) {\n      return fg;\n    }\n    const fgR = (fg >> 24) & 0xFF;\n    const fgG = (fg >> 16) & 0xFF;\n    const fgB = (fg >> 8) & 0xFF;\n    const bgR = (bg >> 24) & 0xFF;\n    const bgG = (bg >> 16) & 0xFF;\n    const bgB = (bg >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    return channels.toRgba($r, $g, $b);\n  }\n\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    this.clearListeners();\n    this._disposed = true;\n  }\n\n  public clearListeners(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n\nexport function runAndSubscribe<T>(event: IEvent<T>, handler: (e: T | undefined) => any): IDisposable {\n  handler(undefined);\n  return event(e => handler(e));\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\nexport class MutableDisposable<T extends IDisposable> implements IDisposable {\n  private _value?: T;\n  private _isDisposed = false;\n\n  /**\n   * Gets the value if it exists.\n   */\n  public get value(): T | undefined {\n    return this._isDisposed ? undefined : this._value;\n  }\n\n  /**\n   * Sets the value, disposing of the old value if it exists.\n   */\n  public set value(value: T | undefined) {\n    if (this._isDisposed || value === this._value) {\n      return;\n    }\n    this._value?.dispose();\n    this._value = value;\n  }\n\n  /**\n   * Resets the stored value and disposes of the previously stored value.\n   */\n  public clear(): void {\n    this.value = undefined;\n  }\n\n  public dispose(): void {\n    this._isDisposed = true;\n    this._value?.dispose();\n    this._value = undefined;\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\ndeclare const process: unknown;\n\nexport const isNode = (typeof process !== 'undefined' && 'title' in (process as any)) ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\nexport function getSafariVersion(): number {\n  if (!isSafari) {\n    return 0;\n  }\n  const majorVersion = userAgent.match(/Version\\/(\\d+)/);\n  if (majorVersion === null || majorVersion.length < 2) {\n    return 0;\n  }\n  return parseInt(majorVersion[1]);\n}\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n// Note that when this is true, isLinux will also be true.\nexport const isChromeOS = /\\bCrOS\\b/.test(userAgent);\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\n\ninterface ITaskQueue {\n  /**\n   * Adds a task to the queue which will run in a future idle callback.\n   * To avoid perceivable stalls on the mainthread, tasks with heavy workload\n   * should split their work into smaller pieces and return `true` to get\n   * called again until the work is done (on falsy return value).\n   */\n  enqueue(task: () => boolean | void): void;\n\n  /**\n   * Flushes the queue, running all remaining tasks synchronously.\n   */\n  flush(): void;\n\n  /**\n   * Clears any remaining tasks from the queue, these will not be run.\n   */\n  clear(): void;\n}\n\ninterface ITaskDeadline {\n  timeRemaining(): number;\n}\ntype CallbackWithDeadline = (deadline: ITaskDeadline) => void;\n\nabstract class TaskQueue implements ITaskQueue {\n  private _tasks: (() => boolean | void)[] = [];\n  private _idleCallback?: number;\n  private _i = 0;\n\n  protected abstract _requestCallback(callback: CallbackWithDeadline): number;\n  protected abstract _cancelCallback(identifier: number): void;\n\n  public enqueue(task: () => boolean | void): void {\n    this._tasks.push(task);\n    this._start();\n  }\n\n  public flush(): void {\n    while (this._i < this._tasks.length) {\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n    }\n    this.clear();\n  }\n\n  public clear(): void {\n    if (this._idleCallback) {\n      this._cancelCallback(this._idleCallback);\n      this._idleCallback = undefined;\n    }\n    this._i = 0;\n    this._tasks.length = 0;\n  }\n\n  private _start(): void {\n    if (!this._idleCallback) {\n      this._idleCallback = this._requestCallback(this._process.bind(this));\n    }\n  }\n\n  private _process(deadline: ITaskDeadline): void {\n    this._idleCallback = undefined;\n    let taskDuration = 0;\n    let longestTask = 0;\n    let lastDeadlineRemaining = deadline.timeRemaining();\n    let deadlineRemaining = 0;\n    while (this._i < this._tasks.length) {\n      taskDuration = Date.now();\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n      // other than performance.now, Date.now might not be stable (changes on wall clock changes),\n      // this is not an issue here as a clock change during a short running task is very unlikely\n      // in case it still happened and leads to negative duration, simply assume 1 msec\n      taskDuration = Math.max(1, Date.now() - taskDuration);\n      longestTask = Math.max(taskDuration, longestTask);\n      // Guess the following task will take a similar time to the longest task in this batch, allow\n      // additional room to try avoid exceeding the deadline\n      deadlineRemaining = deadline.timeRemaining();\n      if (longestTask * 1.5 > deadlineRemaining) {\n        // Warn when the time exceeding the deadline is over 20ms, if this happens in practice the\n        // task should be split into sub-tasks to ensure the UI remains responsive.\n        if (lastDeadlineRemaining - taskDuration < -20) {\n          console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(lastDeadlineRemaining - taskDuration))}ms`);\n        }\n        this._start();\n        return;\n      }\n      lastDeadlineRemaining = deadlineRemaining;\n    }\n    this.clear();\n  }\n}\n\n/**\n * A queue of that runs tasks over several tasks via setTimeout, trying to maintain above 60 frames\n * per second. The tasks will run in the order they are enqueued, but they will run some time later,\n * and care should be taken to ensure they're non-urgent and will not introduce race conditions.\n */\nexport class PriorityTaskQueue extends TaskQueue {\n  protected _requestCallback(callback: CallbackWithDeadline): number {\n    return setTimeout(() => callback(this._createDeadline(16)));\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    clearTimeout(identifier);\n  }\n\n  private _createDeadline(duration: number): ITaskDeadline {\n    const end = Date.now() + duration;\n    return {\n      timeRemaining: () => Math.max(0, end - Date.now())\n    };\n  }\n}\n\nclass IdleTaskQueueInternal extends TaskQueue {\n  protected _requestCallback(callback: IdleRequestCallback): number {\n    return requestIdleCallback(callback);\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    cancelIdleCallback(identifier);\n  }\n}\n\n/**\n * A queue of that runs tasks over several idle callbacks, trying to respect the idle callback's\n * deadline given by the environment. The tasks will run in the order they are enqueued, but they\n * will run some time later, and care should be taken to ensure they're non-urgent and will not\n * introduce race conditions.\n *\n * This reverts to a {@link PriorityTaskQueue} if the environment does not support idle callbacks.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const IdleTaskQueue = (!isNode && 'requestIdleCallback' in window) ? IdleTaskQueueInternal : PriorityTaskQueue;\n\n/**\n * An object that tracks a single debounced task that will run on the next idle frame. When called\n * multiple times, only the last set task will run.\n */\nexport class DebouncedIdleTask {\n  private _queue: ITaskQueue;\n\n  constructor() {\n    this._queue = new IdleTaskQueue();\n  }\n\n  public set(task: () => boolean | void): void {\n    this._queue.clear();\n    this._queue.enqueue(task);\n  }\n\n  public flush(): void {\n    this._queue.flush();\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n  public isOverline(): number      { return this.bg & BgFlags.OVERLINE; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n  public getUnderlineVariantOffset(): number {\n    return this.extended.underlineVariantOffset;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  public get underlineVariantOffset(): number {\n    const val = (this._ext & ExtFlags.VARIANT_OFFSET) >> 29;\n    if (val < 0) {\n      return val ^ 0xFFFFFFF8;\n    }\n    return val;\n  }\n  public set underlineVariantOffset(value: number) {\n    this._ext &= ~ExtFlags.VARIANT_OFFSET;\n    this._ext |= (value << 29) & ExtFlags.VARIANT_OFFSET;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 0;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000,\n  OVERLINE = 0x40000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..29\n   */\n  UNDERLINE_STYLE = 0x1C000000,\n\n  /**\n   * bit 30..32\n   *\n   * An optional variant for the glyph, this can be used for example to offset underlines by a\n   * number of pixels to create a perfect pattern.\n   */\n  VARIANT_OFFSET = 0xE0000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate\n      // pair conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  trace: LogLevelEnum.TRACE,\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService extends Disposable implements ILogService {\n  public serviceBrand: any;\n\n  private _logLevel: LogLevelEnum = LogLevelEnum.OFF;\n  public get logLevel(): LogLevelEnum { return this._logLevel; }\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._updateLogLevel();\n    this.register(this._optionsService.onSpecificOptionChange('logLevel', () => this._updateLogLevel()));\n\n    // For trace logging, assume the latest created log service is valid\n    traceLogger = this;\n  }\n\n  private _updateLogLevel(): void {\n    this._logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, (this._optionsService.options.logger ? '' : LOG_PREFIX) + message, ...optionalParams);\n  }\n\n  public trace(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.TRACE) {\n      this._log(this._optionsService.options.logger?.trace.bind(this._optionsService.options.logger) ?? console.log, message, optionalParams);\n    }\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.DEBUG) {\n      this._log(this._optionsService.options.logger?.debug.bind(this._optionsService.options.logger) ?? console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.INFO) {\n      this._log(this._optionsService.options.logger?.info.bind(this._optionsService.options.logger) ?? console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.WARN) {\n      this._log(this._optionsService.options.logger?.warn.bind(this._optionsService.options.logger) ?? console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.ERROR) {\n      this._log(this._optionsService.options.logger?.error.bind(this._optionsService.options.logger) ?? console.error, message, optionalParams);\n    }\n  }\n}\n\nlet traceLogger: ILogService;\nexport function setTraceLogger(logger: ILogService): void {\n  traceLogger = logger;\n}\n\n/**\n * A decorator that can be used to automatically log trace calls to the decorated function.\n */\nexport function traceCall(_target: any, key: string, descriptor: any): any {\n  if (typeof descriptor.value !== 'function') {\n    throw new Error('not supported');\n  }\n  const fnKey = 'value';\n  const fn = descriptor.value;\n  descriptor[fnKey] = function (...args: any[]) {\n    // Early exit\n    if (traceLogger.logLevel !== LogLevelEnum.TRACE) {\n      return fn.apply(this, args);\n    }\n\n    traceLogger.trace(`GlyphRenderer#${fn.name}(${args.map(e => JSON.stringify(e)).join(', ')})`);\n    const result = fn.apply(this, args);\n    traceLogger.trace(`GlyphRenderer#${fn.name} return`, result);\n    return result;\n  };\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColor, CursorStyle, CursorInactiveStyle, IOscLinkData } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration, ILinkHandler, IWindowsPty, ILogger } from '@xterm/xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n  readonly onRequestScrollToBottom: IEvent<void>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasUserInput Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer if option scrollOnUserInput is true.\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<TArgs extends any[]> = TArgs extends [] ? []\n  : TArgs extends [...infer TFirst, infer TLast] ? TLast extends IBrandedService ? GetLeadingNonServiceArgs<TFirst> : TArgs\n    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n  OFF = 5\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  readonly logLevel: LogLevelEnum;\n\n  trace(message: any, ...optionalParams: any[]): void;\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Required<ITerminalOptions>;\n\n  /**\n   * Options as exposed through the public API, this property uses getters and setters with\n   * validation which makes it safer but slower. {@link rawOptions} should be used for pretty much\n   * all internal usage for performance reasons.\n   */\n  readonly options: Required<ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when any option changes.\n   */\n  readonly onOptionChange: IEvent<keyof ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when a specific option changes, this is a convenience method that is\n   * preferred over {@link onOptionChange} when only a single option is being listened to.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (arg1: Required<ITerminalOptions>[T]) => any): IDisposable;\n\n  /**\n   * Adds an event listener for when a set of specific options change, this is a convenience method\n   * that is preferred over {@link onOptionChange} when multiple options are being listened to and\n   * handled the same way.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport interface ITerminalOptions {\n  allowProposedApi?: boolean;\n  allowTransparency?: boolean;\n  altClickMovesCursor?: boolean;\n  cols?: number;\n  convertEol?: boolean;\n  cursorBlink?: boolean;\n  cursorStyle?: CursorStyle;\n  cursorWidth?: number;\n  cursorInactiveStyle?: CursorInactiveStyle;\n  customGlyphs?: boolean;\n  disableStdin?: boolean;\n  documentOverride?: any | null;\n  drawBoldTextInBrightColors?: boolean;\n  fastScrollModifier?: 'none' | 'alt' | 'ctrl' | 'shift';\n  fastScrollSensitivity?: number;\n  fontSize?: number;\n  fontFamily?: string;\n  fontWeight?: FontWeight;\n  fontWeightBold?: FontWeight;\n  ignoreBracketedPasteMode?: boolean;\n  letterSpacing?: number;\n  lineHeight?: number;\n  linkHandler?: ILinkHandler | null;\n  logLevel?: LogLevel;\n  logger?: ILogger | null;\n  macOptionIsMeta?: boolean;\n  macOptionClickForcesSelection?: boolean;\n  minimumContrastRatio?: number;\n  rescaleOverlappingGlyphs?: boolean;\n  rightClickSelectsWord?: boolean;\n  rows?: number;\n  screenReaderMode?: boolean;\n  scrollback?: number;\n  scrollOnUserInput?: boolean;\n  scrollSensitivity?: number;\n  smoothScrollDuration?: number;\n  tabStopWidth?: number;\n  theme?: ITheme;\n  windowsMode?: boolean;\n  windowsPty?: IWindowsPty;\n  windowOptions?: IWindowOptions;\n  wordSeparator?: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selectionForeground?: string;\n  selectionBackground?: string;\n  selectionInactiveBackground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n  extendedAnsi?: string[];\n}\n\nexport const IOscLinkService = createDecorator<IOscLinkService>('OscLinkService');\nexport interface IOscLinkService {\n  serviceBrand: undefined;\n  /**\n   * Registers a link to the service, returning the link ID. The link data is managed by this\n   * service and will be freed when this current cursor position is trimmed off the buffer.\n   */\n  registerLink(linkData: IOscLinkData): number;\n  /**\n   * Adds a line to a link if needed.\n   */\n  addLineToLink(linkId: number, y: number): void;\n  /** Get the link data associated with a link ID. */\n  getLinkData(linkId: number): IOscLinkData | undefined;\n}\n\n/*\n * Width and Grapheme_Cluster_Break properties of a character as a bit mask.\n *\n * bit 0: shouldJoin - should combine with preceding character.\n * bit 1..2: wcwidth - see UnicodeCharWidth.\n * bit 3..31: class of character (currently only 4 bits are used).\n *   This is used to determined grapheme clustering - i.e. which codepoints\n *   are to be combined into a single compound character.\n *\n * Use the UnicodeService static function createPropertyValue to create a\n * UnicodeCharProperties; use extractShouldJoin, extractWidth, and\n * extractCharKind to extract the components.\n */\nexport type UnicodeCharProperties = number;\n\n/**\n * Width in columns of a character.\n * In a CJK context, \"half-width\" characters (such as Latin) are width 1,\n * while \"full-width\" characters (such as Kanji) are 2 columns wide.\n * Combining characters (such as accents) are width 0.\n */\nexport type UnicodeCharWidth = 0 | 1 | 2;\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): UnicodeCharWidth;\n  getStringCellWidth(s: string): number;\n  /**\n   * Return character width and type for grapheme clustering.\n   * If preceding != 0, it is the return code from the previous character;\n   * in that case the result specifies if the characters should be joined.\n   */\n  charProperties(codepoint: number, preceding: UnicodeCharProperties): UnicodeCharProperties;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): UnicodeCharWidth;\n  charProperties(codepoint: number, preceding: UnicodeCharProperties): UnicodeCharProperties;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /**\n   * Trigger a callback over the decoration at a cell (in no particular order). This uses a callback\n   * instead of an iterator as it's typically used in hot code paths.\n   */\n  forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport type { ITerminalAddon, Terminal } from '@xterm/xterm';\nimport type { WebglAddon as IWebglApi } from '@xterm/addon-webgl';\nimport { ICharacterJoinerService, ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { ITerminal } from 'browser/Types';\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { getSafariVersion, isSafari } from 'common/Platform';\nimport { ICoreService, IDecorationService, ILogService, IOptionsService } from 'common/services/Services';\nimport { IWebGL2RenderingContext } from './Types';\nimport { WebglRenderer } from './WebglRenderer';\nimport { setTraceLogger } from 'common/services/LogService';\n\nexport class WebglAddon extends Disposable implements ITerminalAddon , IWebglApi {\n  private _terminal?: Terminal;\n  private _renderer?: WebglRenderer;\n\n  private readonly _onChangeTextureAtlas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onChangeTextureAtlas = this._onChangeTextureAtlas.event;\n  private readonly _onAddTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\n  private readonly _onRemoveTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onRemoveTextureAtlasCanvas = this._onRemoveTextureAtlasCanvas.event;\n  private readonly _onContextLoss = this.register(new EventEmitter<void>());\n  public readonly onContextLoss = this._onContextLoss.event;\n\n  constructor(\n    private _preserveDrawingBuffer?: boolean\n  ) {\n    if (isSafari && getSafariVersion() < 16) {\n      // Perform an extra check to determine if Webgl2 is manually enabled in developer settings\n      const contextAttributes = {\n        antialias: false,\n        depth: false,\n        preserveDrawingBuffer: true\n      };\n      const gl = document.createElement('canvas').getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n      if (!gl) {\n        throw new Error('Webgl2 is only supported on Safari 16 and above');\n      }\n    }\n    super();\n  }\n\n  public activate(terminal: Terminal): void {\n    const core = (terminal as any)._core as ITerminal;\n    if (!terminal.element) {\n      this.register(core.onWillOpen(() => this.activate(terminal)));\n      return;\n    }\n\n    this._terminal = terminal;\n    const coreService: ICoreService = core.coreService;\n    const optionsService: IOptionsService = core.optionsService;\n\n    const unsafeCore = core as any;\n    const renderService: IRenderService = unsafeCore._renderService;\n    const characterJoinerService: ICharacterJoinerService = unsafeCore._characterJoinerService;\n    const charSizeService: ICharSizeService = unsafeCore._charSizeService;\n    const coreBrowserService: ICoreBrowserService = unsafeCore._coreBrowserService;\n    const decorationService: IDecorationService = unsafeCore._decorationService;\n    const logService: ILogService = unsafeCore._logService;\n    const themeService: IThemeService = unsafeCore._themeService;\n\n    // Set trace logger just in case it hasn't been yet which could happen when the addon is\n    // bundled separately to the core module\n    setTraceLogger(logService);\n\n    this._renderer = this.register(new WebglRenderer(\n      terminal,\n      characterJoinerService,\n      charSizeService,\n      coreBrowserService,\n      coreService,\n      decorationService,\n      optionsService,\n      themeService,\n      this._preserveDrawingBuffer\n    ));\n    this.register(forwardEvent(this._renderer.onContextLoss, this._onContextLoss));\n    this.register(forwardEvent(this._renderer.onChangeTextureAtlas, this._onChangeTextureAtlas));\n    this.register(forwardEvent(this._renderer.onAddTextureAtlasCanvas, this._onAddTextureAtlasCanvas));\n    this.register(forwardEvent(this._renderer.onRemoveTextureAtlasCanvas, this._onRemoveTextureAtlasCanvas));\n    renderService.setRenderer(this._renderer);\n\n    this.register(toDisposable(() => {\n      const renderService: IRenderService = (this._terminal as any)._core._renderService;\n      renderService.setRenderer((this._terminal as any)._core._createRenderer());\n      renderService.handleResize(terminal.cols, terminal.rows);\n    }));\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderer?.textureAtlas;\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearTextureAtlas();\n  }\n}\n"],
  "mappings": "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",
  "names": ["root", "factory", "exports", "module", "define", "amd", "self", "e", "t", "i", "s", "INDICES_PER_CELL", "BYTES_PER_CELL", "Float32Array", "BYTES_PER_ELEMENT", "$glyph", "$i", "$leftCellPadding", "$clippedPixels", "GlyphRenderer", "Disposable", "_terminal", "_gl", "_dimensions", "_optionsService", "super", "_activeBuffer", "_vertices", "count", "attributes", "attributesBuffers", "gl", "this", "TextureAtlas", "maxAtlasPages", "Math", "min", "throwIfFalsy", "getParameter", "MAX_TEXTURE_IMAGE_UNITS", "maxTextureSize", "MAX_TEXTURE_SIZE", "_program", "createProgram", "maxFragmentShaderTextureUnits", "textureConditionals", "register", "toDisposable", "deleteProgram", "_projectionLocation", "getUniformLocation", "_resolutionLocation", "_textureLocation", "_vertexArrayObject", "createVertexArray", "bindVertexArray", "unitQuadVertices", "unitQuadVerticesBuffer", "createBuffer", "deleteBuffer", "bindBuffer", "ARRAY_BUFFER", "bufferData", "STATIC_DRAW", "enableVertexAttribArray", "vertexAttribPointer", "FLOAT", "unitQuadElementIndices", "Uint8Array", "elementIndicesBuffer", "ELEMENT_ARRAY_BUFFER", "_attributesBuffer", "vertexAttribDivisor", "useProgram", "textureUnits", "Int32Array", "uniform1iv", "uniformMatrix4fv", "PROJECTION_MATRIX", "_atlasTextures", "glTexture", "GLTexture", "createTexture", "deleteTexture", "texture", "activeTexture", "TEXTURE0", "bindTexture", "TEXTURE_2D", "texParameteri", "TEXTURE_WRAP_S", "CLAMP_TO_EDGE", "TEXTURE_WRAP_T", "texImage2D", "RGBA", "UNSIGNED_BYTE", "enable", "BLEND", "blendFunc", "SRC_ALPHA", "ONE_MINUS_SRC_ALPHA", "handleResize", "beginFrame", "_atlas", "x", "y", "code", "bg", "fg", "ext", "chars", "width", "lastBg", "_updateCell", "array", "cols", "NULL_CELL_CODE", "length", "getRasterizedGlyphCombinedChar", "getRasterizedGlyph", "floor", "device", "cell", "char", "offset", "left", "top", "size", "canvas", "height", "texturePage", "texturePositionClipSpace", "pages", "sizeClipSpace", "rawOptions", "rescaleOverlappingGlyphs", "allowRescaling", "fill", "clear", "terminal", "newCount", "rows", "viewport", "uniform2f", "renderModel", "activeBuffer", "bufferLength", "lineLengths", "si", "sub", "subarray", "set", "STREAM_DRAW", "version", "_bindAtlasPageTexture", "drawElementsInstanced", "TRIANGLE_STRIP", "atlas", "generateMipmap", "dimensions", "BYTES_PER_RECTANGLE", "Vertices", "constructor", "$rgba", "$x1", "$y1", "$r", "$g", "$b", "$a", "RectangleRenderer", "_themeService", "_verticesCursor", "_updateCachedColors", "colors", "onChangeColors", "_updateViewportRectangle", "renderBackgrounds", "_renderVertices", "renderCursor", "vertices", "DYNAMIC_DRAW", "_bgFloat", "_colorToFloat32Array", "background", "_cursorFloat", "cursor", "_addRectangleFloat", "model", "currentStartX", "currentBg", "currentFg", "currentInverse", "modelIndex", "inverse", "rectangleCount", "RENDER_MODEL_INDICIES_PER_CELL", "cells", "RENDER_MODEL_BG_OFFSET", "RENDER_MODEL_FG_OFFSET", "_updateRectangle", "style", "dpr", "cursorWidth", "startX", "endX", "ansi", "rgba", "foreground", "expandFloat32Array", "_addRectangle", "x1", "y1", "r", "g", "b", "a", "color", "RENDER_MODEL_EXT_OFFSET", "COMBINED_CHAR_BIT_MASK", "Uint32Array", "selection", "createSelectionRenderModel", "indexCount", "WebglRenderer", "_characterJoinerService", "_charSizeService", "_coreBrowserService", "_coreService", "_decorationService", "preserveDrawingBuffer", "_cursorBlinkStateManager", "MutableDisposable", "_charAtlasDisposable", "_observerDisposable", "_model", "RenderModel", "_workCell", "CellData", "_workCell2", "_rectangleRenderer", "_glyphRenderer", "_onChangeTextureAtlas", "EventEmitter", "onChangeTextureAtlas", "event", "_onAddTextureAtlasCanvas", "onAddTextureAtlasCanvas", "_onRemoveTextureAtlasCanvas", "onRemoveTextureAtlasCanvas", "_onRequestRedraw", "onRequestRedraw", "_onContextLoss", "onContextLoss", "_handleColorChange", "_cellColorResolver", "CellColorResolver", "_core", "_renderLayers", "LinkRenderLayer", "screenElement", "linkifier", "createRenderDimensions", "_devicePixelRatio", "_updateDimensions", "_updateCursorBlink", "onOptionChange", "_handleOptionsChanged", "_canvas", "mainDocument", "createElement", "contextAttributes", "antialias", "depth", "getContext", "Error", "addDisposableDomListener", "console", "log", "preventDefault", "_contextRestorationTimeout", "setTimeout", "warn", "fire", "clearTimeout", "removeTerminalFromCache", "_initializeWebGLState", "_requestRedrawViewport", "value", "observeDevicePixelDimensions", "window", "w", "h", "_setCanvasDevicePixelDimensions", "onWindowChange", "appendChild", "_isAttached", "document", "body", "contains", "l", "dispose", "parentElement", "removeChild", "textureAtlas", "_charAtlas", "_refreshCharAtlas", "_clearModel", "handleDevicePixelRatioChange", "resize", "css", "setDimensions", "handleCharSizeChanged", "handleBlur", "pause", "handleFocus", "resume", "start", "end", "columnSelectMode", "handleSelectionChanged", "update", "handleCursorMove", "restartBlinkAnimation", "acquireTextureAtlas", "getDisposeArrayDisposable", "forwardEvent", "warmUp", "setAtlas", "clearGlyphRenderer", "clearTextureAtlas", "clearTexture", "reset", "handler", "joinerId", "handleGridChanged", "_updateModel", "render", "isCursorVisible", "options", "cursorBlink", "CursorBlinkStateManager", "_requestRedrawCursor", "row", "line", "joinedRanges", "isJoined", "lastCharX", "range", "j", "clamp", "cursorY", "buffer", "active", "baseY", "viewportRelativeCursorY", "ydisp", "cursorX", "lastCursorX", "isCursorInitialized", "isCursorHidden", "modelUpdated", "lines", "get", "getJoinedCharacters", "result", "loadCell", "shift", "JoinedCellData", "translateToString", "getChars", "getCode", "resolve", "getWidth", "isFocused", "cursorStyle", "cursorInactiveStyle", "cursorAccent", "updateCell", "NULL_CELL_CHAR", "updateBackgrounds", "updateCursor", "ceil", "lineHeight", "round", "letterSpacing", "AttributeData", "firstCell", "content", "combinedData", "_width", "isCombined", "getAsCharData", "max", "createShader", "type", "source", "shader", "shaderSource", "compileShader", "getShaderParameter", "COMPILE_STATUS", "error", "getShaderInfoLog", "deleteShader", "vertexSource", "fragmentSource", "program", "attachShader", "VERTEX_SHADER", "FRAGMENT_SHADER", "linkProgram", "getProgramParameter", "LINK_STATUS", "getProgramInfoLog", "newLength", "newArray", "BaseRenderLayer", "_container", "id", "zIndex", "_alpha", "_deviceCharWidth", "_deviceCharHeight", "_deviceCellWidth", "_deviceCellHeight", "_deviceCharLeft", "_deviceCharTop", "classList", "add", "toString", "_initCanvas", "remove", "_ctx", "alpha", "_clearAll", "startRow", "endRow", "oldCanvas", "cloneNode", "replaceChild", "colorSet", "dim", "fillRect", "clearRect", "fillStyle", "font", "_getFont", "textBaseline", "TEXT_BASELINE", "_clipCell", "fillText", "beginPath", "rect", "clip", "isBold", "isItalic", "fontWeightBold", "fontWeight", "fontSize", "fontFamily", "container", "linkifier2", "coreBrowserService", "optionsService", "themeService", "onShowLinkUnderline", "_handleShowLinkUnderline", "onHideLinkUnderline", "_handleHideLinkUnderline", "_state", "_clearCurrentLink", "_clearCells", "middleRowCount", "y2", "x2", "undefined", "INVERTED_DEFAULT_COLOR", "is256Color", "_fillBottomLineAtCells", "node", "addEventListener", "disposed", "removeEventListener", "$colors", "$fg", "$bg", "$hasFg", "$hasBg", "$isSelected", "$variantOffset", "_optionService", "_selectionRenderModel", "deviceCellWidth", "extended", "underlineStyle", "lineWidth", "forEachDecorationAtCell", "d", "backgroundColorRGB", "foregroundColorRGB", "isCellSelected", "blend", "selectionBackgroundOpaque", "selectionInactiveBackgroundOpaque", "selectionForeground", "treatGlyphAsBackgroundColor", "charAtlasCache", "deviceCellHeight", "deviceCharWidth", "deviceCharHeight", "devicePixelRatio", "newConfig", "generateConfig", "entry", "ownedByIndex", "ownedBy", "indexOf", "configEquals", "config", "splice", "push", "core", "newEntry", "unicodeService", "index", "clonedColors", "NULL_COLOR", "selectionBackgroundTransparent", "selectionInactiveBackgroundTransparent", "slice", "contrastCache", "halfContrastCache", "customGlyphs", "allowTransparency", "drawBoldTextInBrightColors", "minimumContrastRatio", "colorCode", "DIM_OPACITY", "isFirefox", "isLegacyEdge", "_renderCallback", "_restartInterval", "isPaused", "_blinkStartTimeout", "_blinkInterval", "clearInterval", "_animationFrame", "cancelAnimationFrame", "_animationTimeRestarted", "Date", "now", "requestAnimationFrame", "timeToStart", "BLINK_INTERVAL", "time", "setInterval", "blockElementDefinitions", "patternCharacterDefinitions", "boxDrawingDefinitions", "xp", "yp", "powerlineDefinitions", "rightPadding", "leftPadding", "ctx", "c", "xOffset", "yOffset", "blockElementDefinition", "charDefinition", "box", "xEighth", "yEighth", "patternDefinition", "patternSet", "cachedPatterns", "Map", "pattern", "tmpCanvas", "ownerDocument", "tmpCtx", "imageData", "ImageData", "startsWith", "parseInt", "substring", "split", "map", "parseFloat", "data", "putImageData", "createPattern", "boxDrawingDefinition", "strokeStyle", "instructions", "Object", "entries", "actualInstructions", "Number", "instruction", "f", "svgToCanvasInstructionMap", "args", "translateArgs", "stroke", "closePath", "powerlineDefinition", "clipRegion", "Path2D", "cssLineWidth", "bezierCurveTo", "lineTo", "moveTo", "cellWidth", "cellHeight", "doClamp", "element", "parentWindow", "callback", "observer", "ResizeObserver", "find", "target", "disconnect", "devicePixelContentBoxSize", "inlineSize", "blockSize", "observe", "isPowerlineGlyph", "codepoint", "isEmoji", "glyphSizeX", "currentOffset", "SelectionRenderModel", "hasSelection", "viewportStartRow", "viewportEndRow", "viewportCappedStartRow", "viewportCappedEndRow", "startCol", "endCol", "selectionStart", "selectionEnd", "viewportY", "buffers", "NULL_RASTERIZED_GLYPH", "texturePosition", "_pages", "_document", "_config", "_unicodeService", "_didWarmUp", "_cacheMap", "FourKeyMap", "_cacheMapCombined", "_activePages", "_workBoundingBox", "bottom", "right", "_workAttributeData", "_textureSize", "_requestClearModel", "_createNewPage", "_tmpCanvas", "createCanvas", "TMP_CANVAS_GLYPH_PADDING", "_tmpCtx", "willReadFrequently", "page", "_doWarmUp", "queue", "IdleTaskQueue", "enqueue", "DEFAULT_COLOR", "DEFAULT_EXT", "rasterizedGlyph", "_drawToCache", "currentRow", "pagesBySize", "filter", "sort", "percentageUsed", "sameSizeI", "mergingPages", "sortedMergingPagesIndexes", "glyphs", "mergedPageIndex", "mergedPage", "_mergePages", "_deletePage", "newPage", "AtlasPage", "mergedSize", "p", "drawImage", "pageIndex", "adjustingPage", "restrictToCellHeight", "_getFromCacheMap", "cacheMap", "key", "idx", "bgColorMode", "bgColor", "_getColorFromAnsiIndex", "arr", "toColorRGB", "channels", "toColor", "opaque", "fgColorMode", "fgColor", "bold", "excludeFromContrastRatioDemands", "minimumContrastColor", "_getMinimumContrastColor", "multiplyOpacity", "cache", "_getContrastCache", "adjustedColor", "getColor", "bgRgba", "_resolveBackgroundRgba", "fgRgba", "_resolveForegroundRgba", "ensureContrastRatio", "setColor", "codeOrChars", "String", "fromCharCode", "allowedWidth", "allowedHeight", "save", "isInvisible", "isInverse", "isDim", "italic", "underline", "isUnderline", "strikethrough", "isStrikethrough", "overline", "isOverline", "getFgColor", "getFgColorMode", "getBgColor", "getBgColorMode", "temp", "temp2", "backgroundColor", "_getBackgroundColor", "globalCompositeOperation", "fontStyle", "powerlineGlyph", "charCodeAt", "restrictedPowerlineGlyph", "isRestrictedPowerlineGlyph", "foregroundColor", "_getForegroundColor", "padding", "customGlyph", "tryDrawCustomChar", "chWidth", "enableClearThresholdCheck", "wcwidth", "getStringCellWidth", "isUnderlineColorDefault", "isUnderlineColorRGB", "getUnderlineColor", "join", "xLeft", "yTop", "yMid", "yBot", "nextOffset", "getUnderlineVariantOffset", "xChLeft", "xChRight", "xChMid", "yCurlyBot", "yCurlyTop", "offsetWidth", "setLineDash", "computeNextVariantOffset", "lineRatio", "gapRatio", "xChWidth", "gap", "restore", "metrics", "measureText", "actualBoundingBoxDescent", "strokeText", "isBeyondCellBounds", "clearColor", "getImageData", "isEmpty", "_findGlyphBoundingBox", "activePage", "activeRow", "fixedRows", "wasPageAndRowFound", "candidatePage", "addGlyph", "boundingBox", "restrictedGlyph", "found", "alphaOffset", "_usedPixels", "_glyphs", "glyph", "sourcePages", "enableThresholdCheck", "fgR", "fgG", "fgB", "threshold", "abs", "rgb", "toPaddedHex", "contrastRatio", "l1", "l2", "toCss", "toRgba", "opacity", "toChannels", "bgR", "bgG", "bgB", "isOpaque", "ratio", "rgbaColor", "factor", "$ctx", "$litmusColor", "createLinearGradient", "match", "repeat", "rgbaMatch", "relativeLuminance2", "rs", "gs", "bs", "pow", "relativeLuminance", "reduceLuminance", "cr", "increaseLuminance", "bgL", "fgL", "resultA", "resultARatio", "resultB", "_listeners", "_disposed", "_event", "listener", "arg1", "arg2", "call", "clearListeners", "from", "to", "disposeArray", "disposables", "_disposables", "_isDisposed", "_value", "TwoKeyMap", "_data", "first", "second", "third", "fourth", "isNode", "process", "userAgent", "navigator", "platform", "includes", "isSafari", "test", "majorVersion", "isMac", "isIpad", "isIphone", "isWindows", "isLinux", "isChromeOS", "TaskQueue", "_tasks", "_i", "task", "_start", "flush", "_idleCallback", "_cancelCallback", "_requestCallback", "_process", "bind", "deadline", "taskDuration", "longestTask", "lastDeadlineRemaining", "timeRemaining", "deadlineRemaining", "PriorityTaskQueue", "_createDeadline", "identifier", "duration", "requestIdleCallback", "cancelIdleCallback", "_queue", "ExtendedAttrs", "clone", "newObj", "hasExtendedAttrs", "isBlink", "isProtected", "isFgRGB", "isBgRGB", "isFgPalette", "isBgPalette", "isFgDefault", "isBgDefault", "isAttributeDefault", "updateExtended", "underlineColor", "getUnderlineColorMode", "isUnderlineColorPalette", "getUnderlineStyle", "underlineVariantOffset", "_urlId", "_ext", "urlId", "val", "obj", "setFromCharData", "stringFromCodePoint", "CHAR_DATA_ATTR_INDEX", "combined", "CHAR_DATA_CHAR_INDEX", "CHAR_DATA_WIDTH_INDEX", "DEFAULT_ATTR", "CHAR_DATA_CODE_INDEX", "NULL_CELL_WIDTH", "WHITESPACE_CELL_CHAR", "WHITESPACE_CELL_WIDTH", "WHITESPACE_CELL_CODE", "codePoint", "_interim", "input", "startPos", "interim", "byte1", "byte2", "byte3", "byte4", "discardInterim", "cp", "tmp", "pos", "missing", "fourStop", "o", "n", "optionsKeyToLogLevel", "trace", "LogLevelEnum", "TRACE", "debug", "DEBUG", "info", "INFO", "WARN", "ERROR", "off", "OFF", "traceLogger", "LogService", "logLevel", "_logLevel", "_updateLogLevel", "onSpecificOptionChange", "optionalParams", "message", "_evalLazyOptionalParams", "logger", "_log", "IOptionsService", "_target", "descriptor", "fn", "apply", "name", "JSON", "stringify", "DI_TARGET", "DI_DEPENDENCIES", "serviceRegistry", "ctor", "has", "decorator", "arguments", "IBufferService", "createDecorator", "ICoreMouseService", "ICoreService", "ICharsetService", "IInstantiationService", "ILogService", "IOscLinkService", "IUnicodeService", "IDecorationService", "__webpack_module_cache__", "__webpack_require__", "moduleId", "cachedModule", "__webpack_modules__", "WebglAddon", "_preserveDrawingBuffer", "getSafariVersion", "onWillOpen", "activate", "coreService", "unsafeCore", "renderService", "_renderService", "characterJoinerService", "charSizeService", "decorationService", "logService", "_logService", "setTraceLogger", "_renderer", "setRenderer", "_createRenderer"]
}
